{"id":512007456,"lang":"java","time":"1Â month","timestamp":1624437995,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/512007456/","is_pending":"Not Pending","title":"Reverse Linked List II","memory":"36.8 MB","code":"class Solution {\n    public ListNode reverseBetween(ListNode head, int m, int n) {\n\n        // Empty list\n        if (head == null) {\n            return null;\n        }\n\n        // Move the two pointers until they reach the proper starting point\n        // in the list.\n        ListNode cur = head, prev = null;\n        while (m > 1) {\n            prev = cur;\n            cur = cur.next;\n            m--;\n            n--;\n        }\n\n        // The two pointers that will fix the final connections.\n        ListNode con = prev, tail = cur;\n\n        // Iteratively reverse the nodes until n becomes 0.\n        ListNode third = null;\n        while (n > 0) {\n            third = cur.next;\n            cur.next = prev;\n            prev = cur;\n            cur = third;\n            n--;\n        }\n\n        // Adjust the final connections as explained in the algorithm\n        if (con != null) {\n            con.next = prev;\n        } else {\n            head = prev;\n        }\n\n        tail.next = cur;\n        return head;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111","title_slug":"reverse-linked-list-ii"}
{"id":512535084,"lang":"java","time":"1Â month","timestamp":1624537008,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/512535084/","is_pending":"Not Pending","title":"Circular Array Loop","memory":"38.9 MB","code":"class Solution {\n    public boolean circularArrayLoop(int[] nums) {\n        HashSet<Integer> nonCycleIndex = new HashSet();\n        for(int i = 0; i < nums.length; i++) {\n            boolean isForward = nums[i] >= 0;\n            int fast = i, slow = i;\n            do {\n                slow = findNextIndex(nums, slow, isForward, nonCycleIndex); // move slow one step ahead\n                fast = findNextIndex(nums, fast, isForward, nonCycleIndex); // move fast two steps ahead\n                if(fast != -1) {\n                    fast = findNextIndex(nums, fast, isForward, nonCycleIndex);\n                }\n            }\n            while(slow != -1 && fast != -1 && slow != fast);\n            \n            if(slow != -1 && slow == fast) {\n                return true;\n            } else {\n                nonCycleIndex.add(i);\n            }\n        }\n        return false;\n    }\n    \n    private int findNextIndex(int[] nums, int i, boolean isForward, Set<Integer> nonCycleIndex) {\n        boolean direction = nums[i] >= 0;\n        if(direction != isForward) {\n            return -1; // if different direction, not meet the requirement\n        }\n        \n        int index = (i + nums[i]) % nums.length;\n        index = index < 0 ? index + nums.length: index;\n        \n        if(nonCycleIndex.contains(index)) {\n            return -1; // if we already evaluated such case before and it's not a cycle, return -1 directly.\n        }\n        \n        if(i == index) {\n            return -1; // if single element in the cycle, not meet the requirement.\n        }\n        \n        return index;\n    }\n}\n\n//Cycle should only be in one direction!\n//Origin can be any random point in the array!\n//Cycle should contain more than one elements ","compare_result":"11111111111111111111111111111111111111111","title_slug":"circular-array-loop"}
{"id":501222285,"lang":"java","time":"1 month, 3 weeks","timestamp":1622528528,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/501222285/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"42.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    List<Integer> l;\n    public TreeNode balanceBST(TreeNode root) {\n        l=new ArrayList<>();\n        inOrder(root);\n        \n        return construct(0,l.size()-1);\n    }\n    private void inOrder(TreeNode root)\n    {\n        if(root==null) return;\n        \n        inOrder(root.left);\n        l.add(root.val);\n        inOrder(root.right);\n        return;\n    }\n    \n    private TreeNode construct(int left,int right)\n    {\n        if(left>right)\n            return null;\n        int mid=left+(right-left)/2;\n        TreeNode root=new TreeNode(l.get(mid));\n        if(left==right)\n            return root;\n        root.left=construct(left,mid-1);\n        root.right=construct(mid+1,right);\n        return root;\n        \n        \n    }\n}","compare_result":"1111111111111111","title_slug":"balance-a-binary-search-tree"}
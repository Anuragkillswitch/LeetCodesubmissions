{"id":507677316,"lang":"java","time":"1 month, 1 week","timestamp":1623654043,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/507677316/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"38.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n\n//Recursive Solution!\nclass Solution {\n    public void flatten(TreeNode root) {\n     helper(root);   \n    }\n    \n    public TreeNode helper(TreeNode node){\n        if(node==null){\n            return null;\n        }\n        \n        TreeNode left = helper(node.left);\n        TreeNode right = helper(node.right);\n        \n        if(left==null && right==null){\n            return node;\n        }else if(left==null && right!=null){\n            return right;\n        }else if(left!=null && right==null){\n            node.right = node.left;\n            node.left = null;\n            return left;\n        }else{\n            TreeNode temp = node.right;\n            node.right = node.left;\n            left.right = temp;\n            node.left = null;\n            return right;\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list"}
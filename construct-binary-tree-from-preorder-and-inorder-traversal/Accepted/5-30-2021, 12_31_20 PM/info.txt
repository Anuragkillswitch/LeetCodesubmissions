{"id":500254820,"lang":"java","time":"1 month, 3 weeks","timestamp":1622358080,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/500254820/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"38.9 MB","code":"class Solution {\n    int preorderIndex;\n    Map<Integer, Integer> inorderIndexMap;\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        preorderIndex = 0;\n        // build a hashmap to store value -> its index relations\n        inorderIndexMap = new HashMap<>();\n        for (int i = 0; i < inorder.length; i++) {\n            inorderIndexMap.put(inorder[i], i);\n        }\n\n        return arrayToTree(preorder, 0, preorder.length - 1);\n    }\n\n    private TreeNode arrayToTree(int[] preorder, int left, int right) {\n        // if there are no elements to construct the tree\n        if (left > right) return null;\n\n        // select the preorder_index element as the root and increment it\n        int rootValue = preorder[preorderIndex++];\n        TreeNode root = new TreeNode(rootValue);\n\n        // build left and right subtree\n        // excluding inorderIndexMap[rootValue] element because it's the root\n        root.left = arrayToTree(preorder, left, inorderIndexMap.get(rootValue) - 1);\n        root.right = arrayToTree(preorder, inorderIndexMap.get(rootValue) + 1, right);\n        return root;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}
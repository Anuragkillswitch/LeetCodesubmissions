{"id":513439745,"lang":"java","time":"4Â weeks","timestamp":1624716271,"status_display":"Accepted","runtime":"26 ms","url":"/submissions/detail/513439745/","is_pending":"Not Pending","title":"Count of Smaller Numbers After Self","memory":"59 MB","code":"class Solution {\n    private int[] bit;\n    \n    public List<Integer> countSmaller(int[] nums) {\n        List<Integer> res = new ArrayList<>();\n        if (nums.length == 0) return res;\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int n : nums) {\n            max = Math.max(n, max);\n            min = Math.min(n, min);\n        }\n        bit = new int[max - min + 2];\n        for (int i = nums.length - 1; i >= 0; i--) {\n            res.add(sum(nums[i] - min));\n            add(nums[i] - min + 1);\n        }\n        Collections.reverse(res);\n        return res;\n    }\n    \n    private int lowbit(int i) {\n        return i & -i;\n    }\n    \n    private int sum(int k) {\n        int sum = 0;\n        for (; k > 0; k -= lowbit(k)) {\n            sum += bit[k];\n        }\n        return sum;\n    }\n    \n    private void add(int k) {\n        for (; k < bit.length; k += lowbit(k)) {\n            bit[k]++;\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-smaller-numbers-after-self"}
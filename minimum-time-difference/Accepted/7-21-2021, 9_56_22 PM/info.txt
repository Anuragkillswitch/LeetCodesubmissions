{"id":526100239,"lang":"java","time":"3 days, 15 hours","timestamp":1626884782,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/526100239/","is_pending":"Not Pending","title":"Minimum Time Difference","memory":"38.8 MB","code":"class Solution {\n    public int findMinDifference(List<String> timePoints) {\n        boolean[] visited = new boolean[24 * 60];\n        for (String time : timePoints) {\n            int h = Integer.parseInt(time.substring(0, 2));\n            int m = Integer.parseInt(time.substring(3));\n            if (visited[h * 60 + m]) return 0; // if visited before return 0 \n            visited[h * 60 + m] = true; // mark as visited\n        }\n        \n        int prev = 0, min = Integer.MAX_VALUE;\n        int first = 0, last = 0;\n        int idx = visited.length - 1; // find last first, so idx points to the end\n        \n        // find the last true from the back, or the last number(max minutes)\n        while(!visited[idx])\n            idx--;  \n        last = idx;\n        \n        // find the first true, or the first number(min minutes)\n        idx = 0;\n        while(!visited[idx])\n            idx++;\n        first = idx;\n        \n        prev = first;\n        for(int i = first + 1; i <= last; i++){\n            if(visited[i]){\n                min = Math.min(min, i - prev);\n                prev = i;\n            }\n        }\n        \n        // since every two consectutive are compared, we also need to\n        // compare the diff between first one and the last\n        min = Math.min(min, (24 * 60 - last + first));\n        return min;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-time-difference"}
{"id":519739891,"lang":"java","time":"2 weeks, 1 day","timestamp":1625823539,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/519739891/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"42 MB","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        ArrayList<Integer> sub = new ArrayList<>();\n        sub.add(nums[0]);\n        \n        for (int i = 1; i < nums.length; i++) {\n            int num = nums[i];\n            if (num > sub.get(sub.size() - 1)) {\n                sub.add(num);\n            } else {\n                int j = binarySearch(sub, num);\n                sub.set(j, num);\n            }\n        }\n        \n        return sub.size();\n    }\n    \n    private int binarySearch(ArrayList<Integer> sub, int num) {\n        int left = 0;\n        int right = sub.size() - 1;\n        int mid = (left + right) / 2;\n        \n        while (left < right) {\n            mid = (left + right) / 2;\n            if (sub.get(mid) == num) {\n                return mid;\n            }\n            \n            if (sub.get(mid) < num) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        \n        return left;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence"}
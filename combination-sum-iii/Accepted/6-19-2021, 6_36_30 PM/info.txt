{"id":510128056,"lang":"java","time":"1Â month","timestamp":1624107990,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/510128056/","is_pending":"Not Pending","title":"Combination Sum III","memory":"36.6 MB","code":"class Solution {\n// list to store the final result\n\t List<List<Integer>> list=new ArrayList<>();\n\t  public List<List<Integer>> combinationSum3(int k, int n) {\n\t  // if k>n then there is no solution and sum of all numbers from 1 to 9\n\t  // is  45 so if n>45 the solution is not possible\n\t\t  if(k>n  || n>45) {\n\t\t\t  return list;\n\t\t  }\n\t\t  helper(k,n,new ArrayList<>(),1,0);\n\t\t  return list;\n\t        \n\t    }\n\t\t\n\t\t// helper method to perform backtracking\n\t  public void helper(int k,int n,ArrayList<Integer> currentList,int number,int sum) {\n\t  \n\t\t  // if the conditions are met then add the currentList int the final list of list's\n\t\t  if(sum==n && currentList.size()==k) {\n\t\t\t  list.add(new ArrayList<>(currentList));\n\t\t\t  return;\n\t\t  }\n\t\t  \n\t\t  //check if basic constraints are met and if not return\n\t\t  if(currentList.size()>k || number>9 || sum>n) {\n\t\t\t  return;\n\t\t  }\n\t\t  \n\t\t  // exclude the current number from the currentList \n\t\t  helper(k,n,currentList,number+1,sum);\n\t\t  \n\t\t  // include the current number in the currentList\n\t\t  currentList.add(number);\n\t\t  helper(k,n,currentList,number+1,sum+number);\n\t\t  currentList.remove(currentList.size()-1);\n\t\t  return;\n\t  }\n}","compare_result":"111111111111111111","title_slug":"combination-sum-iii"}
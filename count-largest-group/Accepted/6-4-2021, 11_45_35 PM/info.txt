{"id":503028411,"lang":"java","time":"1 month, 2 weeks","timestamp":1622830535,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/503028411/","is_pending":"Not Pending","title":"Count Largest Group","memory":"38.4 MB","code":"class Solution {\n    public int countLargestGroup(int n) {\n        HashMap<Integer,Integer> map=new HashMap<>();\n            //A certain sum,Number of numbers\n        for(int i=1;i<=n;i++)\n        {\n            int sum=sumOfDigits(i);\n            map.put(sum,map.getOrDefault(sum,0)+1);\n        }\n        //I have to retrieve the number of keys for which the values are the max value\n        //First let's find the max value\n        int max=Integer.MIN_VALUE;\n        for(int value : map.values())\n        {\n            if(value>max)max=value;\n        }\n        \n        int count=0;\n        for(int key : map.keySet())\n        {\n            if(map.get(key)==max)\n                count++;\n        }\n        \n        //Now we need to find the number of keys for which the value ==max\n        \n       return count; \n    }\n    \n    private int sumOfDigits(int n)\n    {\n        int sum=0;\n        while(n>0)\n        {\n            sum+=n%10;\n            n/=10;\n        }\n        return sum;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-largest-group"}
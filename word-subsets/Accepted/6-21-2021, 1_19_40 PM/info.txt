{"id":511002176,"lang":"java","time":"1Â month","timestamp":1624261780,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/511002176/","is_pending":"Not Pending","title":"Word Subsets","memory":"47.3 MB","code":"class Solution {\n    public List<String> wordSubsets(String[] words1, String[] words2) {\n        List<String> result=new ArrayList<>();\n        int[] maxFrequencies=new int[26];\n        for(int i=0;i<words2.length;i++)\n        {\n            String currentWord=words2[i];\n            int[] charFrequencies=getCharFrequencies(currentWord);\n            \n            for(int j=0;j<26;j++)\n                maxFrequencies[j]=Math.max(maxFrequencies[j],charFrequencies[j]);\n            \n            \n        }\n        \n        for(int i=0;i<words1.length;i++)\n        {\n            String CurrentWord=words1[i];\n            int[] charFrequencies=getCharFrequencies(CurrentWord);\n            boolean valid=true;\n            for(int j=0;j<26;j++)\n            {\n                if(charFrequencies[j]<maxFrequencies[j])\n                {\n                    valid=false;\n                    break;\n                }\n            }\n            if(valid)result.add(CurrentWord);\n        }\n        \n        return result;\n    }\n    \n    private int[] getCharFrequencies(String S)\n    {\n        int[] result=new int[26];\n        \n        for(char c : S.toCharArray())\n            result[c-'a']++;\n        \n        return result;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"word-subsets"}
{"id":519957404,"lang":"java","time":"2 weeks, 1 day","timestamp":1625860344,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/519957404/","is_pending":"Not Pending","title":"Rotate List","memory":"39.8 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if(head==null || head.next==null || k==0)return head;\n        \n        int length=1;\n        ListNode cur=head;\n        for(;cur.next!=null;cur=cur.next)\n            length++;\n        k%=length;\n        if(k==0)return head;\n        \n        cur.next=head; //Establishing circular connection\n        \n        //Now to find the new position of new tail\n        \n        cur=head;\n        for(int i=1;i<length-k;i++)\n            cur=cur.next;\n        \n        //cur is the position of new tail\n        \n        ListNode newHead=cur.next;\n        cur.next=null; //Establishing tail and disconnecting it\n        return newHead;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotate-list"}
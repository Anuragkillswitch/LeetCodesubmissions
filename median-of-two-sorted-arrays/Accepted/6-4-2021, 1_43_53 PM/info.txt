{"id":502835501,"lang":"java","time":"1 month, 2 weeks","timestamp":1622794433,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/502835501/","is_pending":"Not Pending","title":"Median of Two Sorted Arrays","memory":"46.5 MB","code":"class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        if(nums1.length == 0 || nums2.length == 0){\n            int[] arr= nums1.length != 0 ? nums1 : nums2;\n            if(arr.length % 2 != 0) return arr[arr.length/2];\n            return ((double)arr[arr.length/2] + (double)arr[arr.length/2-1])/2;\n        }\n        \n        //We want to perform our binary search on the array with less elements to improve time complexity        \n        if(nums1.length > nums2.length) {\n            int[] temp = nums1;\n            nums1 = nums2;\n            nums2 = temp;\n        }\n        int m = nums1.length;\n        int n = nums2.length;\n        \n        int low = 0;\n        int high = m;\n        \n        while(low <= high) {\n            int partition1 = low + (high - low)/2;\n            int partition2 = (m+n)/2 - partition1;\n            \n            int left1 = (partition1 == 0)? Integer.MIN_VALUE : nums1[partition1-1];\n            int left2 = (partition2 == 0)? Integer.MIN_VALUE : nums2[partition2-1];\n            int right1 = (partition1 == m)? Integer.MAX_VALUE : nums1[partition1];\n            int right2 = (partition2 == n)? Integer.MAX_VALUE : nums2[partition2];\n            \n            //Good Partition (l1 < r2 && l2 < r1)\n            \n            if(left1 > right2) {\n                high = partition1-1;\n            } else if (left2 > right1) {\n                low = partition1+1;\n            } else {\n                if((m+n)%2 == 0) {\n                    return (Math.max(left1, left2) + Math.min(right1, right2)) / 2.0;\n                } else {\n                    return Math.min(right1, right2);\n                }\n            }\n        }\n        return -1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"median-of-two-sorted-arrays"}
{"id":497068411,"lang":"java","time":"2Â months","timestamp":1621760684,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/497068411/","is_pending":"Not Pending","title":"Binary Tree Paths","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<String> binaryTreePaths(TreeNode root) {\n        List<String> result=new ArrayList<>();\n        if(root==null)\n            return result;\n        String CurrentPath=Integer.toString(root.val);\n        if(root.left==null && root.right==null)\n            result.add(CurrentPath);\n        \n        if(root.left!=null)\n            dfs(root.left,CurrentPath,result);\n        \n        if(root.right!=null)\n            dfs(root.right,CurrentPath,result);\n        \n        \n        return result;\n    }\n    \n    public void dfs(TreeNode node,String CurrentPath,List<String> result)\n    {\n        CurrentPath+=\"->\"+node.val;\n        \n        if(node.right==null &&& node.left==null)\n        {result.add(CurrentPath);\n         return;\n        } \n    }\n}","compare_result":null,"title_slug":"binary-tree-paths"}
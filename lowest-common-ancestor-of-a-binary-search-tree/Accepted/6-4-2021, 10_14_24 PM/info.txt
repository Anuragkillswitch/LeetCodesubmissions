{"id":502993441,"lang":"java","time":"1 month, 2 weeks","timestamp":1622825064,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/502993441/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"47 MB","code":"class Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n\n        // Value of p\n        int pVal = p.val;\n\n        // Value of q;\n        int qVal = q.val;\n\n        // Start from the root node of the tree\n        TreeNode node = root;\n\n        // Traverse the tree\n        while (node != null) {\n\n            // Value of ancestor/parent node.\n            int parentVal = node.val;\n\n            if (pVal > parentVal && qVal > parentVal) {\n                // If both p and q are greater than parent\n                node = node.right;\n            } else if (pVal < parentVal && qVal < parentVal) {\n                // If both p and q are lesser than parent\n                node = node.left;\n            } else {\n                // We have found the split point, i.e. the LCA node.\n                return node;\n            }\n        }\n        return null;\n    }\n}","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}
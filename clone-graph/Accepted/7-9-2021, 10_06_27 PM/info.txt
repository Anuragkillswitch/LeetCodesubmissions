{"id":519880846,"lang":"java","time":"2 weeks, 1 day","timestamp":1625848587,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/519880846/","is_pending":"Not Pending","title":"Clone Graph","memory":"39.7 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    HashMap<Integer,Node> visited;\n    public Node cloneGraph(Node node) {\n        if(node==null)return null;\n        visited=new HashMap<>();\n        \n        return helper(node);\n                              \n    }\n    \n    private Node helper(Node node)\n    {\n        Node current=new Node(node.val);\n        visited.put(node.val,current);\n        \n        for(Node c : node.neighbors)\n        {\n            if(visited.containsKey(c.val))\n            {\n                current.neighbors.add(visited.get(c.val));\n            }else{\n                current.neighbors.add(helper(c));\n            }\n        }\n        \n        return current;\n    }\n}","compare_result":"1111111111111111111111","title_slug":"clone-graph"}
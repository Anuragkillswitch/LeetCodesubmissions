{"id":510095493,"lang":"c","time":"1Â month","timestamp":1624101482,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/510095493/","is_pending":"Not Pending","title":"Combination Sum II","memory":"N/A","code":"void dfs(int* nums, int* colSizes, int numsSize, int target, \n         int** sols, int* sols_size, int* sol, int sol_size, int pointer) {\n  if(target < 0) return;\n  else if(target == 0) {\n    sols[*sols_size] = calloc(sol_size, sizeof(int));\n    for(int i = 0; i < sol_size; i++) sols[*sols_size][i] = sol[i];\n    colSizes[*sols_size] = sol_size;\n    (*sols_size)++;\n  }\n  else{\n    for(int i = pointer; i < numsSize; i++) {\n      if(nums[i] > target) return;\n      // Avoid duplicates\n      if(i != pointer && nums[i] == nums[i - 1]) continue;\n      sol[sol_size] = nums[i];\n      // The reason we do not need to make a copy is DFS guarantees that we will\n      // NOT stop searching on current path unless it gets accepted or rejected\n      dfs(nums, colSizes, numsSize, target - nums[i], \n          sols, sols_size, sol, sol_size + 1, i + 1);\n    }\n  }\n}\n\nint comp(const void* v1, const void* v2) {\n  return (*(int*) v1) - (*(int*) v2);\n}\n\nint** combinationSum2(int* nums, int numsSize, int target, int** colSizes, int* returnSize) {\n  // Use an unbounded array (amortized constant time) to replace the following 500 calloc\n  // if you want to make it more rigorous\n  int** sols = calloc(500, sizeof(int*));\n  *colSizes = calloc(500, sizeof(int));\n  int* sol = calloc(500, sizeof(int));\n  qsort((void*) nums, numsSize, sizeof(int), comp);\n  dfs(nums, *colSizes, numsSize, target, sols, returnSize, sol, 0, 0);\n  return sols;\n}","compare_result":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"combination-sum-ii"}
{"id":512702919,"lang":"java","time":"1Â month","timestamp":1624564370,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/512702919/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"36.7 MB","code":"class Solution {  \n    boolean recurse(char[][] board, int[][] gridSet, int[] rowSet, int[] colSet, int curRow, int curCol, int ctr) {\n        //success! we found a solution.\n        if (ctr == 81)\n            return true;\n        \n        //reached end of board (bottom-right corner)\n        if (curRow == 8 && curCol == 9)\n            return false;\n        \n        //roll over to next row\n        if (curCol == 9)\n            return recurse(board, gridSet, rowSet, colSet, curRow + 1, 0, ctr);\n        \n        //continue to next position\n        if (board[curRow][curCol] != '.')\n            return recurse(board, gridSet, rowSet, colSet, curRow, curCol + 1, ctr);\n        \n        for (int i = 1; i <= 9; ++i) {\n            int mask = 1 << i;\n            //check if setting i in current position is possible.\n            if ((rowSet[curRow] & mask) > 0 || (colSet[curCol] & mask) > 0 || (gridSet[curRow/3][curCol/3] & mask) > 0)\n                continue;\n            \n            //set number i in current position\n            board[curRow][curCol] = (char) ('0' + i);\n            rowSet[curRow] |= mask;\n            colSet[curCol] |= mask;\n            gridSet[curRow/3][curCol/3] |= mask;\n            \n            //if we found a solution, return immediately (otherwise board state will be undone).\n            if (recurse(board, gridSet, rowSet, colSet, curRow, curCol + 1, ctr + 1))\n                return true;\n            \n            //undo number assignment\n            board[curRow][curCol] = '.';\n            mask = ~mask;\n            rowSet[curRow] &= mask;\n            colSet[curCol] &= mask;\n            gridSet[curRow/3][curCol/3] &= mask;\n        }\n        \n        return false;\n    }\n    \n    public void solveSudoku(char[][] board) {\n        int[][] gridSet = new int[3][3];\n        int[] rowSet = new int[9], colSet = new int[9];\n        \n        int ctr = 0;\n        \n        //set bits for positions already filled.\n        //also, count number of positions already filled.\n        for (int row = 0; row < 9; ++row) {\n            for (int col = 0; col < 9; ++col) {\n                if (board[row][col] == '.')\n                    continue;\n                int mask = 1 << (board[row][col] - '0');\n                rowSet[row] |= mask;\n                colSet[col] |= mask;\n                gridSet[row/3][col/3] |= mask;\n                ++ctr;\n            }\n        }\n        \n        recurse(board, gridSet, rowSet, colSet, 0, 0, ctr);\n    }\n}","compare_result":"111111","title_slug":"sudoku-solver"}
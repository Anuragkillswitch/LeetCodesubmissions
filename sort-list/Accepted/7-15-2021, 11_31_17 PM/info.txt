{"id":523074550,"lang":"java","time":"1 week, 2 days","timestamp":1626372077,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/523074550/","is_pending":"Not Pending","title":"Sort List","memory":"47.5 MB","code":"\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        if (head == null || head.next == null)\n            return head;\n        ListNode mid = getMid(head);\n        ListNode left = sortList(head);\n        ListNode right = sortList(mid);\n        return merge(left, right);\n    }\n\n    ListNode merge(ListNode list1, ListNode list2) {\n        ListNode dummyHead = new ListNode();\n        ListNode tail = dummyHead;\n        while (list1 != null && list2 != null) {\n            if (list1.val < list2.val) {\n                tail.next = list1;\n                list1 = list1.next;\n                tail = tail.next;\n            } else {\n                tail.next = list2;\n                list2 = list2.next;\n                tail = tail.next;\n            }\n        }\n        tail.next = (list1 != null) ? list1 : list2;\n        return dummyHead.next;\n    }\n\n    ListNode getMid(ListNode head) {\n        ListNode midPrev = null;\n        while (head != null && head.next != null) {\n            midPrev = (midPrev == null) ? head : midPrev.next;\n            head = head.next.next;\n        }\n        ListNode mid = midPrev.next;\n        midPrev.next = null;\n        return mid;\n    }\n}\n","compare_result":"1111111111111111111111111111","title_slug":"sort-list"}
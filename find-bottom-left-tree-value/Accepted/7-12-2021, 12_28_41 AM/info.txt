{"id":520937606,"lang":"java","time":"1 week, 6 days","timestamp":1626029921,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/520937606/","is_pending":"Not Pending","title":"Find Bottom Left Tree Value","memory":"38.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int findBottomLeftValue(TreeNode root) {\n     List<List<Integer>> LOS=new ArrayList<>();\n        \n      Queue<TreeNode> q=new LinkedList<>();\n       \n       q.offer(root);\n        \n        while(!q.isEmpty())\n        {\n            int size=q.size();\n            List<Integer> currentLevel=new ArrayList<>();\n            for(int i=0;i<size;i++)\n            {\n                TreeNode current=q.poll();\n                currentLevel.add(current.val);\n                if(current.left!=null)q.offer(current.left);\n                if(current.right!=null)q.offer(current.right);\n            }\n            LOS.add(currentLevel);\n        }\n        \n        return LOS.get(LOS.size()-1).get(0);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-bottom-left-tree-value"}
{"id":501248871,"lang":"java","time":"1 month, 3 weeks","timestamp":1622532647,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/501248871/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"40.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int widthOfBinaryTree(TreeNode root) {\n        if (root == null)\n            return 0;\n        int width = 1;\n        Queue<TreeNode> queue = new LinkedList<>();\n        LinkedList<Integer> list = new LinkedList<>();\n        queue.offer(root);\n        list.add(1);\n        while (!queue.isEmpty()) {\n            int cnt = queue.size();\n            for (int i = 0; i < cnt; ++i) {\n                TreeNode node = queue.poll();\n                int index = list.removeFirst();\n                if (node.left != null) {\n                    queue.offer(node.left);\n                    list.add(2 * index);\n                }\n                if (node.right != null) {\n                    queue.offer(node.right);\n                    list.add(2 * index + 1);\n                }\n            }\n            if (list.size() > 1)\n                width = Math.max(width, list.getLast() - list.getFirst() + 1);\n        }\n        return width;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree"}
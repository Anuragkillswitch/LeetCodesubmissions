{"id":481440859,"lang":"c","time":"3 months, 1 week","timestamp":1618596178,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/481440859/","is_pending":"Not Pending","title":"Remove All Adjacent Duplicates in String II","memory":"7.4 MB","code":"#define STACK_SIZE_MAX 100000\n\ntypedef struct\n{\n    char data;\n    int count;\n} Entry_t;\n\nchar * removeDuplicates(char * s, int k){\n    Entry_t stack[STACK_SIZE_MAX];\n    int stackSize = 0;\n    \n    for (int i = 0; s[i] != '\\0'; i++)\n    {\n        if (stackSize == 0 || s[i] != stack[stackSize-1].data)\n        {\n            stack[stackSize].data = s[i];\n            stack[stackSize++].count = 1;\n        }\n        else // stackSize != 0 && s[i] == stack[stackSize-1]\n        {\n            if (stack[stackSize-1].count == k-1)\n            {\n                stackSize -= k-1;\n            }\n            else\n            {\n                stack[stackSize].data = s[i];\n                stack[stackSize].count = stack[stackSize-1].count + 1;\n                stackSize++;\n            }\n        }\n    }\n    \n    char* ans = malloc(sizeof(char) * (stackSize + 1));\n    for (int i = 0; i < stackSize; i++)\n    {\n        // printf(\"%c\", stack[i].data);\n        ans[i] = stack[i].data;\n    }\n    // printf(\"\\nEnd\\n\");\n    \n    ans[stackSize] = '\\0';\n    return ans;\n}","compare_result":"111111111111111111","title_slug":"remove-all-adjacent-duplicates-in-string-ii"}
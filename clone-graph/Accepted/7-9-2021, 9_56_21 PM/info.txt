{"id":519876965,"lang":"java","time":"2 weeks, 1 day","timestamp":1625847981,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/519876965/","is_pending":"Not Pending","title":"Clone Graph","memory":"39.1 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n    public Node() {\n        val = 0;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val) {\n        val = _val;\n        neighbors = new ArrayList<Node>();\n    }\n    public Node(int _val, ArrayList<Node> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n}\n*/\n\nclass Solution {\n    \n    HashMap<Integer,Node> visited;\n    public Node cloneGraph(Node node) {\n        if(node==null)return null; \n        visited=new HashMap<>();\n        \n        return helper(node);\n        \n        \n    }\n    \n    private Node helper(Node node)\n    {\n        \n        Node root=new Node(node.val);\n        visited.put(node.val,root);\n        \n        \n        for(Node c : node.neighbors)\n        {\n           if(visited.containsKey(c.val))\n           {\n               root.neighbors.add(visited.get(c.val));\n           }else\n           {    \n               root.neighbors.add(helper(c));\n           }\n        }\n        \n        return root;\n        \n    }\n}","compare_result":"1111111111111111111111","title_slug":"clone-graph"}
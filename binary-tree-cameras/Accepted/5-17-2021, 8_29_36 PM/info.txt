{"id":494458375,"lang":"java","time":"2 months, 1 week","timestamp":1621263576,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/494458375/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"38.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int cameraCount;\n    Set<TreeNode> covered;\n    public int minCameraCover(TreeNode root) {\n        if(root==null)\n            return 0;\n        cameraCount=0;\n        covered=new HashSet<>();\n        covered.add(null);\n        dfs(root,null); //Root and his parent\n        \n        return cameraCount;\n    }\n    \n    public void dfs(TreeNode node,TreeNode parent)\n    {\n        if(node==null)\n            return;\n        \n        dfs(node.left,node);\n        dfs(node.right,node);\n        \n        //Now we are at the bottommost node\n        \n        //Parent is null and my node is uncovered or any of it's left or right are not covered\n        \n        if(parent==null && !covered.contains(node) || !covered.contains(node.left) || !covered.contains(node.right))\n        {\n            cameraCount++;\n            covered.add(node);\n            covered.add(parent);\n            covered.add(node.left);\n            covered.add(node.right);\n        }\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-cameras"}
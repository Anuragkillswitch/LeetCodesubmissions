{"id":497074142,"lang":"java","time":"2Â months","timestamp":1621761862,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/497074142/","is_pending":"Not Pending","title":"Deepest Leaves Sum","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    //Level order traversal e last level er sum...\n    //BFS\n    public int deepestLeavesSum(TreeNode root) {\n        \n        int levelSum=0;\n        \n        Queue<TreeNode> queue=new LinkedList<>();\n        queue.offer(root);\n        while(!queue.isEmpty())\n        {\n            levelSum=0;  //Resetting level sum back to zero for every level\n            int size=queue.size();\n            for(int i=0;i<size;i++)\n            {\n                TreeNode currentNode=queue.pull();\n                levelSum+=currentNode.val;\n                if(currentNode.left!=null)\n                   queue.offer(currentNode.left);\n                if(currentNode.right!=null)\n                   queue.offer(currentNode.right);\n            }\n        }\n        \n        \n        return levelSum;\n        \n    }\n}","compare_result":null,"title_slug":"deepest-leaves-sum"}
{"id":493958606,"lang":"c","time":"2 months, 1 week","timestamp":1621169422,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/493958606/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"6.3 MB","code":"int count_right(struct TreeNode* root) {\n    if(root==NULL) {\n        return 0;\n    }\n    return(count_right(root->left)+1+count_right(root->right));\n}\n\nvoid populate_right(struct TreeNode* root,int *a,int *index,int level) {\n    if(root==NULL) {\n        return;\n    }\n    \n    if (level == *index) {\n        a[(*index)++] = root->val;\n    }\n\n    populate_right(root->right,a,index,level+1);\n    populate_right(root->left,a,index,level+1);\n}\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* rightSideView(struct TreeNode* root, int* returnSize){\n    int c,index=0,level=0;\n    int *res;\n    c = count_right(root);\n    res = (int *)malloc(sizeof(int)*c);\n    memset(res,0,sizeof(int)*c);\n    \n    populate_right(root,res,&index,level);\n    *returnSize = index;\n    return res;\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view"}
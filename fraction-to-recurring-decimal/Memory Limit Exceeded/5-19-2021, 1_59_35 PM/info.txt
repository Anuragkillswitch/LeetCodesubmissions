{"id":495259538,"lang":"java","time":"2Â months","timestamp":1621412975,"status_display":"Memory Limit Exceeded","runtime":"N/A","url":"/submissions/detail/495259538/","is_pending":"Not Pending","title":"Fraction to Recurring Decimal","memory":"N/A","code":"class Solution {\n    public String fractionToDecimal(int numerator, int denominator) {\n        StringBuilder sb=new StringBuilder();\n        \n        int q=numerator/denominator;\n        int r=numerator%denominator;\n        \n        sb.append(q);\n        if(r==0)\n            return sb.toString();\n        else\n            sb.append(\".\");\n        \n        HashMap<Integer,Integer> map=new HashMap<>();\n        \n        \n        while(r!=0)\n        { if(map.containsKey(r))\n          {\n            int l=map.get(r);\n            sb.insert(l,\"(\");\n            sb.append(\")\");\n           }\n         else{\n              r*=10;\n            q=r/denominator;\n            r=r%denominator;\n            sb.append(q);\n             }\n           \n        }\n            \n        \n        \n        \n        return sb.toString();\n        \n    }\n}","compare_result":"11000000000000000000000000000000000000","title_slug":"fraction-to-recurring-decimal"}
{"id":493957521,"lang":"java","time":"2 months, 1 week","timestamp":1621169210,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/493957521/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        List<Integer> right=new ArrayList<>();\n        \n        if(root==null)\n            return right;\n        \n        \n        //Do BFS So a queue\n        \n        Queue<TreeNode> queue=new Queue<>();\n        \n        queue.add(root);\n        \n        while(!queue.isEmpty())\n        {\n            int size=queue.size(); //How many things in the current level\n            \n            for(int i=0;i<size;i++)\n            {\n                TreeNode current=queue.remove();\n                if(i==size-1) //RIGHTMOST \n                {\n                    right.add(current.val);\n                }\n                \n                if(current.left!=null)\n                    queue.add(root.left);\n                \n                if(current.right!=null)\n                    queue.add(root.right);\n            }\n        }\n        \n        return right;\n        \n        \n    }\n}","compare_result":null,"title_slug":"binary-tree-right-side-view"}
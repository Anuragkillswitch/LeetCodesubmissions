{"id":509730675,"lang":"java","time":"1Â month","timestamp":1624027581,"status_display":"Accepted","runtime":"82 ms","url":"/submissions/detail/509730675/","is_pending":"Not Pending","title":"Range Sum Query - Mutable","memory":"69.8 MB","code":"class NumArray {\n    int[] buckets;\n    int size;\n    int[] A;\n\n    public NumArray(int[] nums) {\n        this.A = nums;\n        double root = Math.sqrt(nums.length);\n        size = (int) Math.ceil(nums.length / root);\n        buckets = new int[size];\n        int bucketNumber = 0;\n        \n        for(int i = 0; i < nums.length; i++){\n            bucketNumber = i / size;\n            buckets[bucketNumber] += nums[i];\n        }\n    }\n    \n    public void update(int index, int val) {\n        int bucketNumber = index / size;\n        buckets[bucketNumber] -= A[index];\n        buckets[bucketNumber] += val;\n        A[index] = val;\n    }\n    \n    public int sumRange(int left, int right) {\n        \n        int startBucket = left / size;\n        int endBucket = right / size;\n        int sum = 0;\n        \n        if(startBucket != endBucket){\n            // for the startBucket which is partial\n            int endStartBucket = startBucket * size + size;\n            for(int i = left; i < endStartBucket; i++){\n                sum += A[i];\n            }\n            \n            // for complete buckets included\n            for(int i = startBucket + 1; i < endBucket; i++){\n                sum += buckets[i];\n            }\n            \n            // for the endBucket which is partial\n            for(int i = endBucket * size; i < right + 1; i++){\n                sum += A[i];\n            }  \n        }\n        else{\n            for(int i = left; i <= right; i++){\n                sum += A[i];\n            }\n        }\n        return sum;\n    }\n}","compare_result":"111111111111111","title_slug":"range-sum-query-mutable"}
{"id":502992384,"lang":"java","time":"1 month, 2 weeks","timestamp":1622824889,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/502992384/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if(root==null)return null;\n        if(p.val<root.val && q.val<root.val)\n        {\n            return lowestCommonAncestor(root.left,p,q);\n        }else if(p.val>root.val && p.val>root.val)\n        {\n            return lowestCommonAncestor(root.right,p,q);\n        }else\n        {\n            return root;\n        }\n    }\n}","compare_result":"111110101101111011010011010","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}
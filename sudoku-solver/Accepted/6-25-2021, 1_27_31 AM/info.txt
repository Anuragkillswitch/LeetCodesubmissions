{"id":512704531,"lang":"c","time":"1Â month","timestamp":1624564651,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/512704531/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"5.7 MB","code":"int brutal_solve(char** board, int pos){\n    int i, j, ris = 0, k, flag = 1;\n    while(pos <81 && board[pos/9][pos%9]!='.')  pos++;\n    if(pos>=81){\n        ris = 1;\n        return ris;\n    }\n\n    for(k=1; k<=9; k++){\n        flag = 1;\n        for(i=0; i<9;i++){\n            if(board[pos/9][i]==(k+'0')) flag = 0;\n            if(board[i][pos%9]==(k+'0')) flag = 0;\n        }\n        for(i=(pos/9)-((pos/9)%3); i<(pos/9)-((pos/9)%3)+3; i++)\n            for(j=(pos%9)-((pos%9)%3); j<(pos%9)-((pos%9)%3)+3; j++)\n                if(board[i][j]==k +'0') flag = 0;\n        if(flag){\n            board[pos/9][pos%9] = k+'0';\n            ris = brutal_solve(board, pos +1);\n            if(ris==0)\n                board[pos/9][pos%9] = '.';\n            else\n                return ris;\n\n        }\n    }\n    return ris;\n}\n\n\nvoid updateExclusion(int exclusion[9][9][9], int i, int j, int value){\n    int r, c, k, m, n;\n    for(k=0;k<9;k++){\n        exclusion[i][j][k]=0;\n        exclusion[k][j][value]=0;\n        exclusion[i][k][value]=0;\n    }\n    r = (i/3)*3;\n    c = (j/3)*3;\n    for(m=0; m<3; m++, r++)\n        for(n=0; n<3; n++)\n            exclusion[r][c+n][value]=0;\n    return;\n}\n\nvoid solveSudoku(char** board, int boardSize, int* boardColSize){\n\n    int exclusion[9][9][9], flag=1;\n    int i, j, k, r, c, value, iter1, iter2, squareR, squareC, squareRlim, squareClim;\n    int rToAdd, cToAdd;\n    for(i=0;i<9;i++)\n        for(j=0;j<9;j++)\n            for(k=0;k<9;k++)\n                exclusion[i][j][k]=1;\n   \n        for(i=0;i<9;i++)\n            for(j=0;j<9;j++)\n                if(board[i][j]!='.'){\n                    value = board[i][j] - 1 - '0';\n                    updateExclusion(exclusion, i, j, value);\n                }\n\t  /*this flag will be used for checking if a new value has been inserted in the Sudoku scheme*/\n    while(flag){\n        flag = 0;\n        for(iter1=0;iter1<9;iter1++){\n            for(squareR=0;squareR<3;squareR++){\n                for(squareC=0;squareC<3;squareC++){\n                    value =0;\n                    squareRlim = squareR*3;\n                    squareClim = squareC*3;\n                    for(r=squareRlim;r<squareRlim+3&&flag==0;r++){\n                        for(c=squareClim;c<squareClim+3&&flag==0;c++){\n                            if(exclusion[r][c][iter1]!=0){\n                                rToAdd=r;\n                                cToAdd=c;\n                                \n                            }\n                            value += exclusion[r][c][iter1];\n                        }\n                    }\n                    if(value == 1){\n                        board[rToAdd][cToAdd] = iter1+1+'0';\n                        flag++;\n                        updateExclusion(exclusion, rToAdd, cToAdd, iter1);\n                    }\n                }\n            }\n            for(r=0;r<9;r++){\n                value = 0;\n                for(c=0;c<9;c++){\n                    if(exclusion[r][c][iter1]!=0)\n                        cToAdd=c;\n                    value += exclusion[r][c][iter1];\n                }\n                if(value == 1){\n                    board[r][cToAdd] = iter1+1 +'0';\n                    flag++;\n                    updateExclusion(exclusion, r, cToAdd, iter1);\n                }\n            }\n\n            for(c=0;c<9;c++){\n                value = 0;\n                for(r=0;r<9;r++){\n                    if(exclusion[r][c][iter1]!=0)\n                        rToAdd=r;\n                    value += exclusion[r][c][iter1];\n                }\n                if(value == 1){\n                    board[rToAdd][c] = iter1+1 + '0';\n                    flag++;\n                    updateExclusion(exclusion, rToAdd, c, iter1);\n                }\n            }\n        }\n    }\n    brutal_solve(board, 0);\n    return;\n    \n    \n}","compare_result":"111111","title_slug":"sudoku-solver"}
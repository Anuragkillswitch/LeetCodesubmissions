{"id":511702149,"lang":"java","time":"1Â month","timestamp":1624384938,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/511702149/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxPathSum(TreeNode root) {\n        if(root==null)return 0;\n       int result=Integer.MIN_VALUE;\n       helper(root,result);\n       return result; \n    }\n    \n    private int helper(TreeNode root,int result)\n    {\n         if(root==null)return 0;\n        \n        int left=maxPathSum(root.left);\n        int right=maxPathSum(root.right);\n        int ms=Math.max(Math.max(left,right)+root.val,root.val);\n        int m2=Math.max(ms,left+right+root.val);\n        result=Math.max(result,m2);\n        return ms;\n    }\n}","compare_result":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"binary-tree-maximum-path-sum"}
{"id":496649205,"lang":"java","time":"2Â months","timestamp":1621689913,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/496649205/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"39.3 MB","code":"/**\n * Definition for singly-linked list.\n * class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        if(head==null || head.next==null)\n            return null;\n        \n        ListNode slowPointer=head;\n        ListNode fastPointer=head;\n        \n        while(fastPointer.next!=null && fastPointer.next.next!=null)\n        {\n            fastPointer=fastPointer.next.next;\n            slowPointer=slowPointer.next;\n            \n            if(slowPointer==fastPointer)\n            {\n                slowPointer=head;\n                while(slowPointer!=fastPointer)\n                {\n                    slowPointer=slowPointer.next;\n                    fastPointer=fastPointer.next;\n                }\n                return slowPointer;\n            }\n            \n        }\n        \n        return null;\n    }\n}","compare_result":"1111111111111111","title_slug":"linked-list-cycle-ii"}
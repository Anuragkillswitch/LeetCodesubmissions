{"id":502044779,"lang":"java","time":"1 month, 3 weeks","timestamp":1622662235,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/502044779/","is_pending":"Not Pending","title":"Spiral Matrix","memory":"38.9 MB","code":"class Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        List<Integer> nums=new ArrayList<>();\n        \n        if(matrix==null || matrix.length==0)return nums;\n        \n        int top=0;\n        int bottom=matrix.length-1;\n        int left=0;\n        int right=matrix[0].length-1;\n        int size=matrix.length*matrix[0].length;\n        \n            while(nums.size()<size)\n            {\n                for(int i=left;i<=right && nums.size()<size;i++)\n                {\n                    nums.add(matrix[top][i]);\n                }\n                top++;\n                \n                for(int i=top;i<=bottom && nums.size()<size;i++)\n                {\n                    nums.add(matrix[i][right]);\n                }\n                right--;\n                \n                for(int i=right;i>=left && nums.size()<size;i--)\n                {\n                    nums.add(matrix[bottom][i]);\n                }\n                bottom--;\n                for(int i=bottom;i>=top  && nums.size()<size;i--)\n                {\n                    nums.add(matrix[i][left]);\n                }\n                left++;\n            }\n        \n        \n        return nums;\n    }\n}","compare_result":"1111111111111111111111","title_slug":"spiral-matrix"}
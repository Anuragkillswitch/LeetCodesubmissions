{"id":510163752,"lang":"java","time":"1Â month","timestamp":1624114185,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/510163752/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"37.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        List<Integer> l=new ArrayList<>();\n        if(root==null)return l;\n        Queue<TreeNode> queue=new LinkedList<>();\n        \n        queue.offer(root);\n        \n        while(!queue.isEmpty())\n        {\n            int size=queue.size();\n            for(int i=0;i<size;i++)\n            {\n                TreeNode currentNode=queue.poll();\n                if(i==size-1)//Last element on this level\n                    l.add(currentNode.val);\n                \n                if(currentNode.left!=null)queue.offer(currentNode.left);\n                \n                if(currentNode.right!=null)queue.offer(currentNode.right);\n            }\n        }\n        return l;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view"}
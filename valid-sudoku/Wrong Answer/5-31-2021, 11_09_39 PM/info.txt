{"id":500948993,"lang":"java","time":"1 month, 3 weeks","timestamp":1622482779,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/500948993/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"N/A","code":"class Solution {\npublic boolean isValidSudoku(char[][] board) {\n\n    for(int i=0; i<9; i++){\n        for(int j=0; j<9; j++){\n            if(board[i][j]!='.'){\n                if(!isValid(board,i,j,board[i][j]) || (board[i][j]<=0 || board[i][j]>9))\n                    return false;\n            }\n        }\n     }\n    return true;\n}\n\npublic boolean isValid(char[][] board, int row, int col, char num){\n    \n    //for row checking\n    for(int i=col+1;i<9;i++){\n        if(board[row][i] == num)\n            return false;\n    }\n    \n    //For col checking\n    for(int i=row+1;i<9;i++){\n        if(board[i][col] == num)\n            return false;\n    }\n    \n    //for internal square\n    int x = row - row%3, y = col-col%3; //Starting index of that particular grid\n    for(int i=x; i<x+3; i++){\n        for(int j=y; j<y+3; j++){\n            if(board[i][j]==num && !(i==row && j==col))\n                return false;\n        }\n    }   \n    return true;\n}   \n}","compare_result":"011001000110111000001001000101110000110111110010011101101011010111100000010100011000011110001101100100101111111111011011011011110011111111011011110111111010111111101111111001000111011110011111111001010100001111110101101011111010100111010100001111000101111111011111111111011111000101111101100111110000101111001111111101110111111110111101111110101101111001111010110011110111101101001010111111111111111100111011011111010100011010111111111111110111111111101111111011010101111001010111111101111111011011111111110","title_slug":"valid-sudoku"}
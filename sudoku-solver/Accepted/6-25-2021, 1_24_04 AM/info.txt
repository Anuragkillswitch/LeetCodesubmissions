{"id":512703337,"lang":"java","time":"1Â month","timestamp":1624564444,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/512703337/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"36.7 MB","code":"class Solution {\n    char[][] board;\n    int N;\n    public void solveSudoku(char[][] board) {\n        this.board = board;\n        this.N = board.length;\n        backTracking(0,0);\n    }\n    \n    public boolean backTracking(int row, int col){\n        if(row == N-1 && col == N){\n            return true;\n        }\n        \n        if (col == N) { // if we cross last column in board we go to next column\n            row++;\n            col = 0;\n        }\n        \n        if(board[row][col] != '.') // if board[row][col] has a number we go to next available slot\n            return backTracking(row, col+1);\n               \n        for(char num = '1'; num <= '9'; num++){\n            if(validateNumber(row, col, num)){ // check if number fits in that slot\n                board[row][col] = num;\n                if(backTracking(row, col+1)){ // we will continue backtracking if we found our number\n                    return true;   \n                }                \n            }\n            board[row][col] = '.'; // if number is not fit then we will rollback to '.'\n        }\n        \n        \n        return false;\n    }\n    \n    public boolean validateNumber(int row, int col, char num){\n        return !isInRow(row, col, num) && !isInCol(row, col, num) && !isInBox(row, col, num);\n    }\n    \n    public boolean isInRow(int row, int col, char num){\n        for(int i=0; i< N; i++){\n            if(board[row][i] == num)\n                return true;\n        }\n        \n        return false;\n    }\n    \n    public boolean isInCol(int row, int col, char num){\n        for(int i=0; i<N; i++){\n            if(board[i][col]==num)\n                return true;\n        }\n        \n        return false;\n    }\n    \n    public boolean isInBox(int row, int col, char num){\n        int startRow = row - row % 3, startCol = col - col % 3;\n        \n        for (int i = 0; i < 3; i++){\n            for (int j = 0; j < 3; j++){\n                if (board[i + startRow][j + startCol] == num)\n                   return true;\n            }\n        }\n        \n        return false;\n    }\n}\n","compare_result":"111111","title_slug":"sudoku-solver"}
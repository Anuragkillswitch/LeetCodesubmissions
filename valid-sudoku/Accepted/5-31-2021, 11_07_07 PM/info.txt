{"id":500947886,"lang":"java","time":"1 month, 3 weeks","timestamp":1622482627,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/500947886/","is_pending":"Not Pending","title":"Valid Sudoku","memory":"38.7 MB","code":"class Solution {\npublic boolean isValidSudoku(char[][] board) {\n\n    for(int i=0; i<9; i++){\n        for(int j=0; j<9; j++){\n            if(board[i][j]!='.'){\n                if(!isValid(board,i,j,board[i][j]))\n                    return false;\n            }\n        }\n     }\n    return true;\n}\n\npublic boolean isValid(char[][] board, int row, int col, char num){\n    \n    //for row checking\n    for(int i=col+1;i<9;i++){\n        if(board[row][i] == num)\n            return false;\n    }\n    \n    //For col checking\n    for(int i=row+1;i<9;i++){\n        if(board[i][col] == num)\n            return false;\n    }\n    \n    //for internal square\n    int x = row - row%3, y = col-col%3; //Starting index of that particular grid\n    for(int i=x; i<x+3; i++){\n        for(int j=y; j<y+3; j++){\n            if(board[i][j]==num && !(i==row && j==col))\n                return false;\n        }\n    }   \n    return true;\n}   \n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"valid-sudoku"}
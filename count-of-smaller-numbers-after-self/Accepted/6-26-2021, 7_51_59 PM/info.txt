{"id":513445568,"lang":"cpp","time":"4Â weeks","timestamp":1624717319,"status_display":"Accepted","runtime":"132 ms","url":"/submissions/detail/513445568/","is_pending":"Not Pending","title":"Count of Smaller Numbers After Self","memory":"70.1 MB","code":"#pragma GCC optimize(\"Ofast\")\nstatic const auto fast = []() {\n   std::ios_base::sync_with_stdio(false);\n   std::cin.tie(0);\n   std::cout.tie(0);\n   return 0;\n} ();\n\n#define SIZE 20001\n// Least Significant Bit of i\n#define LSB(i) ((i) & -(i))\n\nclass Solution {\nprivate:\n    int tree_[SIZE];\npublic:\n    // Returns the sum of the first i elements (indices 0 to i)\n    // Equivalent to range_sum(0, i)\n    int prefix_sum(int i)\n    {\n        int sum = this->tree_[0];\n        for (; i != 0; i -= LSB(i))\n            sum += this->tree_[i];\n        return sum;\n    }\n\n    // Add 1 to element with index i (zero-based)\n    void add(int i)\n    {\n        if (i == 0){\n            this->tree_[0] += 1;\n            return;\n        }\n        for (; i < SIZE; i+= LSB(i))\n            this->tree_[i] += 1;\n    }\n    \n    vector<int> countSmaller(vector<int>& nums) {\n        auto len = nums.size();\n        memset(this->tree_,0,SIZE*sizeof(int));\n        vector<int> counts(len);\n        while (len--) {\n            auto x = nums[len]+10001;\n            counts[len] = this->prefix_sum(x-1);\n            this->add(x);\n        }\n        return counts;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-smaller-numbers-after-self"}
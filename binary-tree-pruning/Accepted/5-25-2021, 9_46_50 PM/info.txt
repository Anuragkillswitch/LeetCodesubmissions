{"id":498132403,"lang":"java","time":"2Â months","timestamp":1621959410,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/498132403/","is_pending":"Not Pending","title":"Binary Tree Pruning","memory":"36.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode pruneTree(TreeNode root) {\n        if(root==null) return null;\n        \n        containsOne(root);\n         if(!containsOne(root))  root = null;\n        \n        return root;\n    }\n    \n    public boolean containsOne(TreeNode root)\n    {\n        if(root==null)return false;\n        boolean leftContains=containsOne(root.left);\n        boolean rightContains=containsOne(root.right);\n        \n        if(!leftContains)\n            root.left=null;\n        if(!rightContains)\n            root.right=null;\n        \n        return root.val==1 || leftContains || rightContains;\n        //if the value is 1 or the left or right contains 1 then this subtree is safe\n        //Otherwise we have to remove that subtree from the root by the lines #32-#34\n    }\n}","compare_result":"11111111111111111111111111111","title_slug":"binary-tree-pruning"}
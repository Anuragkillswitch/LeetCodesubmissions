{"id":505543213,"lang":"java","time":"1 month, 2 weeks","timestamp":1623261709,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/505543213/","is_pending":"Not Pending","title":"Super Egg Drop","memory":"N/A","code":"class Solution {\n    public int superEggDrop(int k, int n) {\n        if(k==1)return n;\n        if(n==1 || n==0)return n;\n        \n        \n        int[][] dp=new int[k+1][n+1]; //Rows and eggs\n        \n        \n        \n        \n        for(int i=0;i<n+1;i++) //1 egg so drops=no. of floors\n            dp[1][i]=i;\n        \n        for(int i=0;i<n+1;i++) //No eggs\n            dp[0][i]=0;\n        \n        for(int i=0;i<k+1;i++) //No floors\n            dp[i][0]=0;\n        \n        for(int i=1;i<k+1;i++) //One floor ,So one drop!\n            dp[i][1]=1;\n        \n        for(int i=2;i<=k;i++)\n        {\n            for(int j=2;j<=n;j++)\n            {\n                dp[i][j]=Integer.MAX_VALUE;\n                \n                for(int attemptFloor=1;attemptFloor<=j;attemptFloor++)\n                {\n                    int costOfWorstOutcome=1+Math.max(dp[i-1][attemptFloor-1],dp[i][j-attemptFloor]);\n                    \n                    dp[i][j]=Math.min(dp[i][j],costOfWorstOutcome);\n                }\n            }\n        }\n        \n        return dp[k][n];\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000","title_slug":"super-egg-drop"}
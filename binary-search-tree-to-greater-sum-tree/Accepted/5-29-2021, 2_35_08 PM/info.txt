{"id":499776518,"lang":"java","time":"1 month, 3 weeks","timestamp":1622279108,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/499776518/","is_pending":"Not Pending","title":"Binary Search Tree to Greater Sum Tree","memory":"36.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    List<TreeNode> l;\n    public TreeNode bstToGst(TreeNode root) {\n        l=new ArrayList<TreeNode>();\n        inOrder(root); //Ascending sorted List\n        populateNodes(root);\n        \n        return root;\n    }\n    \n        private void populateNodes(TreeNode root)\n    {\n        if(root==null)\n            return;\n        \n        populateNodes(root.left);\n        root.val=SumOfNexts(root);\n        populateNodes(root.right);\n        \n    }\n    \n    private int SumOfNexts(TreeNode root)\n    {\n        int begin=0;\n        for(int i=0;i<l.size();i++)\n        {\n            if(l.get(i)==root)\n            {\n                begin=i;\n                break;\n            }\n        }\n        int sum=0;\n        for(int i=begin;i<l.size();i++)\n        {\n            sum+=l.get(i).val;\n        }\n        return sum;\n    }\n    \n    private void inOrder(TreeNode root)\n    {\n        if(root==null)\n            return;\n        \n        inOrder(root.left);\n        l.add(root);\n        inOrder(root.right);\n    }\n}","compare_result":"1111111111111111111111111111","title_slug":"binary-search-tree-to-greater-sum-tree"}
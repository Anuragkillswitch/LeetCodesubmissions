{"id":494375001,"lang":"java","time":"2 months, 1 week","timestamp":1621246493,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/494375001/","is_pending":"Not Pending","title":"Maximum Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\n        \n        if(nums.length==0 || nums==null)\n            return null;\n      \n       int max=nums[0];\n       int indexOfMax=0;\n        for(int i=1;i<nums.length;i++)\n        {\n            if(nums[i]>max)\n            {max=nums[i];\n             indexOfMax=i;\n        }\n        \n        \n        for(int i=0;i<nums.length;i++)\n        {\n            if(nums[i]==max)\n                indexOfMax=i;\n        }\n        \n        int[] prefix=new int[indexOfMax];\n        int[] suffix=new int[nums.length-indexOfMax];\n        int k=0;\n        for(int i=0;i<indexOfMax;i++)\n            prefix[i]=nums[i];\n        for(int i=indexOfMax+1;i<nums.length;i++)\n             suffix[k++]=nums[i];\n        \n        \n        \n        \n          TreeNode root=new TreeNode(max,constructMaximumBinaryTree(prefix),constructMaximumBinaryTree(suffix));\n        return root;\n        \n        \n        \n    }\n}","compare_result":null,"title_slug":"maximum-binary-tree"}
{"id":510131678,"lang":"java","time":"1Â month","timestamp":1624108724,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/510131678/","is_pending":"Not Pending","title":"Combination Sum III","memory":"37 MB","code":"class Solution {\n    List<List<Integer>> ans;\n    boolean[] vis;\n    public List<List<Integer>> combinationSum3(int k, int n) {\n        ans = new ArrayList<>();\n        vis = new boolean[10];\n        dfs(n, k, new ArrayList<>(), 1, 0, 0);\n        return ans;\n    }\n\n    private void dfs ( int n, int k, List<Integer> list, int idx, int sum, int last ) {\n        if ( list.size() == k ) {\n            if ( sum == n )     ans.add(new ArrayList<>(list));\n            return;\n        }\n        for ( int i = idx; i <= 9; i++ ) {\n            if ( !vis[i] && i > last ) {\n                vis[i] = true;\n                list.add(i);\n                dfs(n, k, list, idx+1, sum+i, i);\n                list.remove(list.size()-1);\n                vis[i] = false;\n            }\n        }\n    }\n}","compare_result":"111111111111111111","title_slug":"combination-sum-iii"}
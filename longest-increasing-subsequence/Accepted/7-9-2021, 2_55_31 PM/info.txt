{"id":519735598,"lang":"java","time":"2 weeks, 1 day","timestamp":1625822731,"status_display":"Accepted","runtime":"79 ms","url":"/submissions/detail/519735598/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"38.5 MB","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        int[] dp = new int[nums.length];\n        Arrays.fill(dp, 1);\n        \n        for (int i = 1; i < nums.length; i++) {\n            for (int j = 0; j < i; j++) {\n                if (nums[i] > nums[j]) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        \n        int longest = 0;\n        for (int c: dp) {\n            longest = Math.max(longest, c);\n        }\n        \n        return longest;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence"}
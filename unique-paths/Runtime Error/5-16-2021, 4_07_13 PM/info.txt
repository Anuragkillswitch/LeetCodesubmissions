{"id":493919338,"lang":"java","time":"2 months, 1 week","timestamp":1621161433,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/493919338/","is_pending":"Not Pending","title":"Unique Paths","memory":"N/A","code":"class Solution {\n    public int uniquePaths(int m, int n) {\n        \n      //Dynamic progranmming\n       //Bottom up approach\n        \n        int[][] dp=new int[m][n]; //Keeping track of all the different ways\n                                      //We can reach each cell in the matrix\n                                      //Starting from (0,0)\n        for(int i=0;i<dp.length;i++)\n            dp[i][0]=1; // For reaching any row's first column\n                        //There is only one way to do it\n                        // i.e. moving downwards\n                        //Because the motion is restricted to downwards and rightwards\n        \n        for(int i=0;i<dp[0].length;i++)\n             dp[0][i]=1; //Only moving rightwards\n        \n        //For any cell that we are currently on\n        //WE could have come from the cell above or the cell left to it\n        \n         for(int i=1;i<dp.length;i++)\n         {\n             for(int j=1;j<dp[i].length;i++)\n             {\n                 dp[i][j]=dp[i-1][j]+dp[i][j-1];\n             }\n         }\n        \n        return dp[m-1][n-1];\n        \n    }\n}","compare_result":"00000000000000000000000000000000000000000000000000000000000000","title_slug":"unique-paths"}
{"id":496646510,"lang":"c","time":"2Â months","timestamp":1621689365,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/496646510/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"7.8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n//Slow pointer and fast pointers\n//If there is exists a cycle then the slow and the fast pointer would collide\nbool hasCycle(struct ListNode *head) {\n    \n    if(head==NULL || head->next==NULL)\n        return false;\n    struct ListNode* slowPointer=head;\n    struct ListNode* fastPointer=head;\n    while(fastPointer->next!=NULL && fastPointer->next->next!=NULL)\n    {fastPointer=fastPointer->next->next;\n     slowPointer=slowPointer->next;\n        if(slowPointer==fastPointer)\n            return true;\n        \n        \n        \n    }\n    \n    return false;\n}","compare_result":"1111111111111111111","title_slug":"linked-list-cycle"}
{"id":520111418,"lang":"java","time":"2 weeks, 1 day","timestamp":1625895493,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/520111418/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"36.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode increasingBST(TreeNode root) {\n        List<Integer> inOrder=new ArrayList<>();\n        helper(inOrder,root);\n        return create(inOrder);\n            \n\n        }\n    \n    private TreeNode create(List<Integer> inOrder)\n    {\n        if(inOrder.isEmpty())return null;\n        TreeNode node=new TreeNode(inOrder.get(0));\n        node.left=null;\n        inOrder.remove(0);//Removing object at index 0\n        node.right=create(inOrder);\n        return node;\n    }\n        \n        \n    \n    private void helper(List<Integer> inOrder,TreeNode root)\n    {\n        if(root==null)return;\n        helper(inOrder,root.left);\n        inOrder.add(root.val);\n        helper(inOrder,root.right);\n        return;\n    }\n}","compare_result":"1111111111111111111111111111111111111","title_slug":"increasing-order-search-tree"}
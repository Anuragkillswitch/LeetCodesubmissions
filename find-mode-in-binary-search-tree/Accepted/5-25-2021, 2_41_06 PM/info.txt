{"id":497997205,"lang":"java","time":"2Â months","timestamp":1621933866,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/497997205/","is_pending":"Not Pending","title":"Find Mode in Binary Search Tree","memory":"39.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    Integer prev=null;\n    int count=1;\n    int max=0; //Maximum node frequency\n    public int[] findMode(TreeNode root) {\n        List<Integer> modes=new ArrayList<>();\n        \n        traverse(root,modes);\n        \n        \n        int[] result=new int[modes.size()];\n        \n        for(int i=0;i<modes.size();i++)\n        {\n            result[i]=modes.get(i);\n            \n        }\n        \n        return result;\n    }\n    \n    //Inorder Traversal Recursive\n    private void traverse(TreeNode root,List<Integer> modes)\n    {\n        if(root==null)\n             return;\n        \n        traverse(root.left,modes);\n        \n        if(prev!=null)\n        {if(prev==root.val)\n            count++;\n         else\n             count=1;\n        }\n        \n        if(count>max)\n            {max=count;\n             modes.clear();\n             modes.add(root.val);\n            }else if(count==max)\n        {\n            modes.add(root.val);\n        }\n        \n        prev=root.val;\n        \n        traverse(root.right,modes);\n    }\n}","compare_result":"1111111111111111111111","title_slug":"find-mode-in-binary-search-tree"}
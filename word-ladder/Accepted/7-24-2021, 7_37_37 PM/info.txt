{"id":527532533,"lang":"java","time":"17 hours, 29 minutes","timestamp":1627135657,"status_display":"Accepted","runtime":"59 ms","url":"/submissions/detail/527532533/","is_pending":"Not Pending","title":"Word Ladder","memory":"41 MB","code":"class Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        HashSet<String> set=new HashSet<>();\n        \n        for(String s : wordList){\n            set.add(s);\n        }\n        \n        if(!set.contains(endWord))return 0;\n        \n        int depth=1;\n        \n        \n        Queue<String> q=new LinkedList<>();\n        q.offer(beginWord);\n        \n        while(!q.isEmpty()){\n            \n            int size=q.size(); //Size of current level\n            \n            for(int i=0;i<size;i++)\n            {\n                String current=q.poll();\n                char[] curr=current.toCharArray();\n                \n                \n                for(int j=0;j<curr.length;j++)\n               {\n                    char letter=curr[j];\n                    for(char c='a';c<='z';c++)\n                    {\n                        if(c==letter)continue;\n                        curr[j]=c;\n                        String pathWord=String.valueOf(curr);\n                        if(pathWord.equals(endWord)){\n                            return depth+1;\n                        }\n                        if(set.contains(pathWord)){\n                            q.offer(pathWord);\n                            set.remove(pathWord);\n                        }\n                    }\n                  curr[j]=letter;\n               }\n           }\n            depth++;\n    }\n        return 0;\n   }\n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"word-ladder"}
{"id":508178275,"lang":"java","time":"1 month, 1 week","timestamp":1623743068,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/508178275/","is_pending":"Not Pending","title":"Matchsticks to Square","memory":"36.4 MB","code":"class Solution {\n    boolean[] vs;\n    int m = 0, sum = 0, max = 0, e = 0;\n    public boolean makesquare(int[] nums) {\n        m = nums.length;\n        if (m < 4) return false;\n        for (int n : nums) {\n            sum += n;\n            max = Math.max(max, n);\n        }\n        if (sum % 4 != 0 || max > sum / 4) return false;\n        Arrays.sort(nums);\n        e = sum / 4;\n        vs = new boolean[m];\n        vs[0] = true;\n        return dfs(nums, 1, nums[0], 4);\n    }\n    \n    private boolean dfs(int[] nums, int idx, int tot, int cnt) {\n        if (tot == e) {\n            if (--cnt == 1) return true;\n            for (int i = 0; i < m; i++) {\n                if (vs[i]) continue;\n                vs[i] = true;\n                boolean res = dfs(nums, i + 1, nums[i], cnt);\n                vs[i] = false;\n                return res;\n            }\n        }\n        for (int i = idx; i < m; i++) {\n            if (vs[i]) continue;\n            if (nums[i] + tot > e) return false;\n            vs[i] = true;\n            if (dfs(nums, i + 1, tot + nums[i], cnt)) return true;\n            vs[i] = false;\n        }\n        return false;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"matchsticks-to-square"}
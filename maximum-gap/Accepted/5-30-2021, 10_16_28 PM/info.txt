{"id":500451978,"lang":"java","time":"1 month, 3 weeks","timestamp":1622393188,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/500451978/","is_pending":"Not Pending","title":"Maximum Gap","memory":"39.2 MB","code":"class Solution {\n\n    // TC : O(n)\n    // SC : O(n)\n    public int maximumGap(int[] nums) {\n\n        int maxGap =0;\n        int n  = nums.length;\n        // Base Case :\n        if(n  < 2)\n            return 0;\n\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n\n        for(int i : nums){\n            min = Math.min(min,i);\n            max = Math.max(max,i);\n        }\n\n\n        int bucketSize =  (int)Math.ceil((double)(max-min)/(n -1));\n\n        int[] minOfBucket = new int[n -1];\n        int[] maxOfBucket = new int[n -1];\n\n        Arrays.fill(minOfBucket, Integer.MAX_VALUE);\n        Arrays.fill(maxOfBucket, Integer.MIN_VALUE);\n\n        //Set the min and max of bucket.\n        for(int i =0;i<n ; i++){\n            if(nums[i]== min || nums[i]==max)\n                continue;\n\n            int bucketIndexForCurrentEl = (nums[i] - min)/bucketSize;\n\n\n            minOfBucket[bucketIndexForCurrentEl] = Math.min(minOfBucket[bucketIndexForCurrentEl], nums[i]);\n            maxOfBucket[bucketIndexForCurrentEl] = Math.max(maxOfBucket[bucketIndexForCurrentEl], nums[i]);\n        }\n\n\n        // Calculate gap using MinB- MaxA\n\n        for(int i =0;i<n -1;i++){\n            if(maxOfBucket[i]==Integer.MIN_VALUE) // empty buckets\n                continue;\n            maxGap = Math.max(minOfBucket[i] - min, maxGap);\n            min = maxOfBucket[i];\n        }\n\n        maxGap = Math.max(maxGap, max-min);// 2\n        return maxGap;\n    }\n}","compare_result":"11111111111111111","title_slug":"maximum-gap"}
{"id":494414878,"lang":"java","time":"2 months, 1 week","timestamp":1621255540,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/494414878/","is_pending":"Not Pending","title":"Verifying an Alien Dictionary","memory":"N/A","code":"class Solution {\n    public boolean isAlienSorted(String[] words, String order) {\n        \n      int[] alphabet=new int[26];\n        \n        for(int i=0;i<order.length();i++)\n        {\n            alphabet[order.charAt(i)-'a']=i; //Indexing lexicographically\n        }\n        \n        for(int i=0;i<words.length;i++)\n        {\n            for(int j=1+1;j<words.length;j++)\n            {\n                int min=Math.min(words[i].length(),words[j].length());\n                //smaller word's length\n                \n                for(int k=0;k<min;k++)\n                {\n                    char iChar=words[i].charAt(k);\n                    char jChar=words[j].charAt(k);\n                    if(alphabet[iChar-'a']<alphabet[jChar-'a'])\n                        break;\n                    else if(alphabet[jChar-'a']<alphabet[iChar-'a'])\n                        return false;\n                    else if(k==min-1 && words[i].length()<words[j].length())\n                        return false;\n                }\n            }\n        }\n        return true;  \n        \n        \n    }\n}","compare_result":"10000101111010100000000110100110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"verifying-an-alien-dictionary"}
{"id":504557337,"lang":"c","time":"1 month, 2 weeks","timestamp":1623093142,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/504557337/","is_pending":"Not Pending","title":"Design Linked List","memory":"13.8 MB","code":"typedef struct MyLinkedList\n{\n    struct MyLinkedList *next;\n    int val;\n    \n} MyLinkedList;\n\n\n// -------------------helper functions------------------\n\n// returns pointer to the i-th node\nsize_t get_node(MyLinkedList* obj, int index)\n{\n    MyLinkedList *iter = obj;\n    int i = 0;\n    while(i < index && iter) \n    {\n        i++;\n        iter = iter->next;\n    }\n    \n    return iter;\n}\n\n// builds a new node\nMyLinkedList* create_node(int val)\n{\n    MyLinkedList *node = malloc(sizeof(MyLinkedList));\n    node->val = val;\n    node->next = NULL;\n    \n    return node;\n}\n\n// -------------------------------------------------------\n\nMyLinkedList* myLinkedListCreate() \n{\n    MyLinkedList *head = malloc(sizeof(MyLinkedList));;\n    head->next = NULL;\n    \n    return head;\n}\n\nint myLinkedListGet(MyLinkedList* obj, int index) \n{\n    MyLinkedList *iter = get_node(obj->next, index);\n    \n    return iter ? iter->val : -1;\n}\n\nvoid myLinkedListAddAtHead(MyLinkedList* obj, int val) \n{\n    MyLinkedList *new_head = create_node(val);\n    new_head->next = obj->next;\n    obj->next = new_head;\n}\n\nvoid myLinkedListAddAtTail(MyLinkedList* obj, int val) \n{\n    MyLinkedList *iter = obj;\n    while (iter->next)\n    {\n        iter = iter->next;\n    }\n    \n    iter->next = create_node(val);\n}\n\nvoid myLinkedListAddAtIndex(MyLinkedList* obj, int index, int val) \n{\n    MyLinkedList *iter = get_node(obj, index);\n    if (iter)\n    {\n        MyLinkedList *new_node = create_node(val);\n        new_node->next = iter->next;\n        iter->next = new_node;\n    }\n}\n\nvoid myLinkedListDeleteAtIndex(MyLinkedList* obj, int index) \n{\n    MyLinkedList *iter = get_node(obj, index), *tmp;\n    if (iter)\n    {    \n        if(iter->next && iter->next->next != NULL) \n        {\n            tmp =iter->next;\n            iter->next = iter->next->next;\n            free(tmp);\n        }\n        else if(iter->next && iter->next->next == NULL) \n        {\n            tmp = iter->next;\n            free(tmp);\n            iter->next = NULL;\n        }\n    }\n}\n\nvoid myLinkedListFree(MyLinkedList* obj)\n{\n    MyLinkedList* iter = obj;\n    \n    while(iter->next)\n    {\n        MyLinkedList* tmp = iter->next;\n        iter->next = iter->next->next;\n        free(tmp);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"design-linked-list"}
{"id":511703771,"lang":"java","time":"1Â month","timestamp":1624385169,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/511703771/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"40.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int result=Integer.MIN_VALUE;\n    public int maxPathSum(TreeNode root) {\n        if(root==null)return 0;\n       \n       helper(root);\n       return result; \n    }\n    \n    private int helper(TreeNode root)\n    {\n         if(root==null)return 0;\n\n        int left=helper(root.left);\n        int right=helper(root.right);\n        int ms=Math.max(Math.max(left,right)+root.val,root.val);\n        int m2=Math.max(ms,left+right+root.val);\n        result=Math.max(result,m2);\n        return ms;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum"}
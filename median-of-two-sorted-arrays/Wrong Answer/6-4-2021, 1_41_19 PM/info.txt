{"id":502834626,"lang":"java","time":"1 month, 2 weeks","timestamp":1622794279,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/502834626/","is_pending":"Not Pending","title":"Median of Two Sorted Arrays","memory":"N/A","code":"class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        \n        if(nums1.length>nums2.length)return findMedianSortedArrays(nums2,nums1);\n        \n        int lengthA=nums1.length;\n        int lengthB=nums2.length;\n        int low=0;\n        int high=lengthA; //Shorter array ,We are gonna do the binary search on\n        \n        while(low<=high)\n        {\n            int partitionA=low+(high-low)/2;\n            int partitionB=((lengthA+lengthB+1)/2)-partitionA;\n            \n            int MaxLeftA=partitionA==0?Integer.MIN_VALUE:nums1[partitionA-1];\n            int MinRightA=partitionA==lengthA?Integer.MAX_VALUE:nums1[partitionA];\n            \n            int MaxLeftB=partitionB==0?Integer.MIN_VALUE:nums2[partitionB-1];\n            int MinRightB=partitionB==lengthB?Integer.MAX_VALUE:nums2[partitionB];\n            \n            if(MaxLeftA<=MinRightB && MaxLeftB<=MinRightA)\n            {\n                if((lengthA+lengthB)%2==0)\n                {\n                    return (double)((Math.max(MaxLeftA,MaxLeftB)+Math.min(MinRightA,MinRightB))/2);\n                    \n                    \n                }else{\n                    return (double)(Math.max(MaxLeftA,MaxLeftB));\n                }\n            }else if(MaxLeftA>MinRightB)\n            {\n                high=partitionA-1;\n                \n            }else\n            {\n                low=partitionA+1;\n            }\n            \n            \n        }\n        \n        throw new IllegalArgumentException();\n        \n    }\n}","compare_resulttitle_slug":"median-of-two-sorted-arrays"}
{"id":521358208,"lang":"java","time":"1 week, 5 days","timestamp":1626101503,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/521358208/","is_pending":"Not Pending","title":"Most Frequent Subtree Sum","memory":"42.3 MB","code":"import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass Solution {\n    public int[] findFrequentTreeSum(TreeNode root) {\n        Map<Integer, Integer> map = new HashMap<>();\n        getSum(root, map);\n        \n        ArrayList<Integer> al = new ArrayList<>();\n        int max = -1;\n      \n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n                al.clear();\n                al.add(entry.getKey());\n            } else if (entry.getValue() == max) {\n                al.add(entry.getKey());\n            }\n        }\n        \n        int[] res = new int[al.size()];\n        int k = 0;\n        for (int i : al) {\n            res[k++] = i;\n        }\n        return res;\n\n\n    }\n\n    private int getSum(TreeNode root, Map<Integer, Integer> map) {\n        if (root == null) return 0;\n        int sum = root.val + getSum(root.left, map) + getSum(root.right, map);\n        map.put(sum, map.getOrDefault(sum, 0) + 1);\n        return sum;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"most-frequent-subtree-sum"}
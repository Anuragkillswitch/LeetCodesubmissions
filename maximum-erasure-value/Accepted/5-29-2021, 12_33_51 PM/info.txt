{"id":499738548,"lang":"java","time":"1 month, 3 weeks","timestamp":1622271831,"status_display":"Accepted","runtime":"45 ms","url":"/submissions/detail/499738548/","is_pending":"Not Pending","title":"Maximum Erasure Value","memory":"58 MB","code":"class Solution {\n    public int maximumUniqueSubarray(int[] nums) {\n        int i = -1;\n        int j = -1;\n        int max = Integer.MIN_VALUE;\n        int currSum = 0;\n        HashSet<Integer> set = new HashSet();\n        while(true){\n            boolean f1 = false;\n            boolean f2 = false;\n            while(i<nums.length-1&&!set.contains(nums[i+1])){ // acquire elements till you don't see any duplicate element in your window \n                \n                // this is loop 1\n                \n                i++;\n                currSum+=nums[i];\n                set.add(nums[i]);\n                f1 = true;\n            }\n            max = Math.max(max,currSum); // currSum is a candidate for max sum \n            while(j<i){ // release elements till you encounter the element that caused loop 1 to stop \n                 j++;\n                 currSum-=nums[j];\n                 set.remove(nums[j]);\n                 if(i<nums.length-1&&nums[j]==nums[i+1]){\n                     break;\n                 }\n                f2 = true;\n            }\n            if(f1==false&&f2==false) break; // exit condition since both loops not run \n        }\n        return max;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-erasure-value"}
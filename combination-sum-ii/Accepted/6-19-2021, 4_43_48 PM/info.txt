{"id":510094259,"lang":"java","time":"1Â month","timestamp":1624101228,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/510094259/","is_pending":"Not Pending","title":"Combination Sum II","memory":"39.4 MB","code":"class Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        \n        List<List<Integer>> l=new ArrayList<>();\n        \n        Arrays.sort(candidates);\n        \n        findCombinations(candidates,0,target,new ArrayList<>(),l);\n        return l;\n    }\n    \n    private void findCombinations(int[] candidates,int index,int target,List<Integer> current,List<List<Integer>> result)\n    {\n        if(target==0)\n        {\n            result.add(new ArrayList<>(current));\n            return;\n        }\n        if(target<0)return;\n        \n        \n        for(int i=index;i<candidates.length;i++)\n        {\n            if(i==index || candidates[i]!=candidates[i-1])  //Check for duplicates in sorted\n            {\n                current.add(candidates[i]);\n                findCombinations(candidates,i+1,target-candidates[i],current,result);\n                current.remove(current.size()-1);\n            }\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii"}
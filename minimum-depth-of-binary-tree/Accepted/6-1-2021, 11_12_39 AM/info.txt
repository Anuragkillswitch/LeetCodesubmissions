{"id":501207027,"lang":"java","time":"1 month, 3 weeks","timestamp":1622526159,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/501207027/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"59.2 MB","code":"class Solution{\n    public int minDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        \n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        \n        int minimumDepth = 0;\n        \n        while (!queue.isEmpty()) {\n            minimumDepth++;\n            \n            int levelSize = queue.size();\n            for (int i = 0; i < levelSize; i++) {\n                TreeNode currentNode = queue.poll();\n                \n                // check if this is a leaf node\n                if (currentNode.left == null && currentNode.right == null)\n                    return minimumDepth;\n                \n                // insert the children of current node in the queue\n                if (currentNode.left != null)\n                    queue.offer(currentNode.left);\n                \n                if (currentNode.right != null)\n                    queue.offer(currentNode.right);\n            }\n        }\n        \n        return minimumDepth;\n    }}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"minimum-depth-of-binary-tree"}
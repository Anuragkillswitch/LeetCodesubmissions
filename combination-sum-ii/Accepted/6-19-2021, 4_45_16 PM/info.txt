{"id":510094700,"lang":"java","time":"1Â month","timestamp":1624101316,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/510094700/","is_pending":"Not Pending","title":"Combination Sum II","memory":"39.3 MB","code":"class Solution {\n    public int combinationSum2(int[] arr, int tar, int idx, List<Integer> smallAns, List<List<Integer>> res) {\n        if (tar == 0) {\n            ArrayList<Integer> base = new ArrayList<>(smallAns);\n            res.add(base);\n            return 1;\n        }\n        boolean[] visited = new boolean[50];\n        int count = 0;\n        for (int i = idx; i < arr.length; ++i) {\n            if (!visited[arr[i]] && tar - arr[i] >= 0) {\n                \n                visited[arr[i]] = true;\n                \n                smallAns.add(arr[i]);\n                count += combinationSum2(arr, tar - arr[i], i + 1, smallAns, res);\n                smallAns.remove(smallAns.size() - 1);\n            }\n        }\n        return count;\n    }\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> smallAns = new ArrayList<>();\n        \n        Arrays.sort(candidates);\n        \n        combinationSum2(candidates, target, 0, smallAns, res);\n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii"}
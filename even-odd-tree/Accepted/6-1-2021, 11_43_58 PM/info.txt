{"id":501485460,"lang":"c","time":"1 month, 3 weeks","timestamp":1622571238,"status_display":"Accepted","runtime":"220 ms","url":"/submissions/detail/501485460/","is_pending":"Not Pending","title":"Even Odd Tree","memory":"82.9 MB","code":"typedef struct queue_node_tag {\n   void *p;\n   struct queue_node_tag *next;\n}queue_node_t;\n\ntypedef struct queue_tag {\n   queue_node_t *head;\n   queue_node_t *tail;\n   int count;\n}queue_t;\n\nstatic inline void init_queue(queue_t *q)\n{\n   q->head = NULL;\n   q->tail = NULL;\n   q->count = 0;\n}\n\nstatic inline void en_queue(queue_t *q, void *p)\n{\n   queue_node_t *t = malloc(sizeof(queue_node_t));\n   \n   t->p = p;\n   t->next = NULL;   \n   \n   if(q->head == NULL) \n      q->head = t;\n\n   if(q->tail == NULL){\n      q->tail = t;\n   }else {\n      q->tail->next = t;\n      q->tail = t;      \n   }\n   q->count++;\n}\n\nstatic inline void* de_queue(queue_t *q)\n{\n   void *ret;\n   queue_node_t *t = q->head;\n\n   if(q->head == NULL)\n      return NULL;\n\n   ret = q->head->p;\n   q->head = q->head->next;\n   if(q->head == NULL)\n      q->tail = NULL;\n   \n   free(t);\n   q->count--;\n   \n   return ret;\n}\n\nstatic inline int count_queue(queue_t *q) {\n   return q->count;\n}\nstatic inline bool is_empty_queue(queue_t *q) {\n   return q->count == 0;\n}\n\n/* QUEUE IMPLEMENTATION  END*/\n\n\n\nbool isEvenOddTree(struct TreeNode* root){\n   queue_t q;\n   init_queue(&q);\n\n   en_queue(&q, root);\n\n   int level = 0;\n   \n   while(!is_empty_queue(&q)) {\n      int size = count_queue(&q);\n      int cur = 0, prev;\n      if(level % 2) \n         prev = INT_MAX;\n      else\n         prev = 0;\n      for(int i = 0; i < size; i++) {\n         struct TreeNode *node;\n         node = de_queue(&q);\n         cur = node->val;\n         \n         if(node->left != NULL)\n            en_queue(&q, node->left);\n         if(node->right != NULL)\n            en_queue(&q, node->right);\n         \n         if(level % 2) {\n            if(cur % 2)\n               return false;\n            if(prev <= cur)\n               return false;\n         }else {\n            if(cur % 2 == 0)\n               return false;\n            if(prev >= cur)\n               return false;\n         }\n         prev = cur;\n      }\n      level++;\n   }\n   return true;\n   \n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"even-odd-tree"}
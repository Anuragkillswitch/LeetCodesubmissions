{"id":523263076,"lang":"java","time":"1 week, 2 days","timestamp":1626407369,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/523263076/","is_pending":"Not Pending","title":"Find Minimum in Rotated Sorted Array II","memory":"38.8 MB","code":"class Solution {\n    public int findMin(int[] nums) {\n\tif (nums == null || nums.length == 0) return 0; \n\n\tint left = 0, right = nums.length - 1, mid;\n\n\twhile (left < right) {\n\t\tmid = (right - left) / 2 + left; \n\n\t\t// linear search if all 3 boundaries are of the SAME value\n\t\tif (nums[left] == nums[mid] && nums[mid] == nums[right]) {\n\t\t\treturn linearSearch(nums, left, right); \n\t\t} else if (nums[left] <= nums[mid]) {\n\t\t\t// left half is sorted \n\t\t\tif (nums[mid] <= nums[right]) {\n\t\t\t\t// whole array is sorted \n\t\t\t\treturn nums[left]; \n\t\t\t} else {\n\t\t\t\t// search right half \n\t\t\t\tleft = mid + 1; \n\t\t\t}\n\t\t} else {\n\t\t\t// right half is sorted, search left half\n\t\t\tright = mid; \n\t\t}\n\t}\n\n\treturn nums[left]; \n}\n\n// linear search and returns min value \nprivate int linearSearch(int[] nums, int left, int right) {\n\tint minVal = Integer.MAX_VALUE; \n\tfor (int i = left; i <= right; i++) {\n\t\tminVal = Math.min(nums[i], minVal);\n\t}\n\treturn minVal;\n}\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-minimum-in-rotated-sorted-array-ii"}
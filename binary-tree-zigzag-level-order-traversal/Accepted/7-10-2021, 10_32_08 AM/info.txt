{"id":520099097,"lang":"java","time":"2 weeks, 1 day","timestamp":1625893328,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/520099097/","is_pending":"Not Pending","title":"Binary Tree Zigzag Level Order Traversal","memory":"39.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n        List<List<Integer>> result=new ArrayList<>();\n        if(root==null)return result;\n        Queue<TreeNode> queue=new LinkedList<>();\n        queue.offer(root);\n        boolean odd=false;\n        //Even LR    Odd RL\n        while(!queue.isEmpty())\n        {\n            int size=queue.size();\n            List<Integer> currentLevel=new ArrayList<>();\n           \n                for(int i=0;i<size;i++)\n                {\n                    TreeNode current=queue.poll();\n                    currentLevel.add(current.val);\n                    if(current.left!=null)queue.offer(current.left);\n                    if(current.right!=null)queue.offer(current.right);\n                }\n       \n            \n            if(odd)Collections.reverse(currentLevel);\n            odd=!odd;\n            result.add(currentLevel);\n        }\n        \n        return result;\n        \n    }\n}","compare_result":"111111111111111111111111111111111","title_slug":"binary-tree-zigzag-level-order-traversal"}
{"id":505767149,"lang":"java","time":"1 month, 2 weeks","timestamp":1623302459,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/505767149/","is_pending":"Not Pending","title":"Divide Two Integers","memory":"35.9 MB","code":"class Solution {\n    public int divide(int dividend, int divisor) {\n         // quotient  overflows the range in both cases\n        if (dividend == 1<<31 && divisor == -1) return Integer.MAX_VALUE;\n        \n        //get the sign of the values\n        boolean sign = (dividend >= 0) == (divisor >= 0) ? true : false;\n        \n        //get normalized dividend and the divisor\n        divisor = Math.abs(divisor);\n        dividend = Math.abs(dividend);\n        \n        //result to return\n        int res = 0;\n        \n        //----------------------------------\n        //TLE for 2147483647, 1, 11 / 989 test cases passed\n        // int temp1 = Math.abs(divisor);\n        // int temp2 = Math.abs(dividend);\n        // while (temp1 <= temp2){\n        //    temp1 += Math.abs(divisor);\n        //    res++;\n        // }\n        //----------------------------------\n        \n        // shift operation is same as multiplication by 2\n        // make use of the shift operation by doubling and check if the divisor goes through dividend\n        while (dividend - divisor >= 0){\n            int count = 0;\n            //divisor << 1 - keep doubling the divisor each time and increment the counter\n            while (dividend - (divisor << 1 << count) >= 0) count++;    \n            //update the result\n            res += 1 << count;\n            //update the dividend\n            dividend = dividend - (divisor << count);\n        }\n        \n        //return if sign\n        return sign == true ? res : -res; \n    }  \n}","compare_resulttitle_slug":"divide-two-integers"}
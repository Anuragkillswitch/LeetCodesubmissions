{"id":493958402,"lang":"c","time":"2 months, 1 week","timestamp":1621169385,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/493958402/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"N/A","code":"int* rightSideView(struct TreeNode* root, int* returnSize)\n{\n    if(!root) return NULL;\n    int* arr = (int*)malloc(sizeof(int));\n    *returnSize = 0;\n    struct TreeNode** queue0 = (struct TreeNode**)malloc(sizeof(struct TreeNode*));\n    struct TreeNode** queue1 = (struct TreeNode**)malloc(sizeof(struct TreeNode*));\n    int size=1, count=0;\n    queue0[size-1] = root;\n    while(size)\n    {\n        count = 0;\n        queue1 = (struct TreeNode**)realloc(queue1, sizeof(struct TreeNode*)*2*size);\n        for(int i = 0; i < size; i++)\n        {\n            if(queue0[i]->left)\n                queue1[count++] = queue0[i]->left;\n            if(queue0[i]->right)\n                queue1[count++] = queue0[i]->right;\n        }\n        *returnSize += 1;\n        arr = (int*)realloc(arr, sizeof(int)*(*returnSize));\n        arr[*returnSize-1] = queue0[size-1]->val;\n        struct TreeNode** t = queue0; queue0=queue1; queue1=t;\n        size = count;\n    }\n    return arr;\n}","compare_result":"11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"binary-tree-right-side-view"}
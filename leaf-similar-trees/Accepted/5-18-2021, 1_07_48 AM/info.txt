{"id":494562548,"lang":"java","time":"2 months, 1 week","timestamp":1621280268,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/494562548/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"36.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean leafSimilar(TreeNode root1, TreeNode root2) {\n        List<Integer> Leaves1=new ArrayList<>();\n        List<Integer> Leaves2=new ArrayList<>();\n        \n        dfs(Leaves1,root1);\n        dfs(Leaves2,root2);\n        \n        return Leaves1.equals(Leaves2);\n        \n    }\n    \n    public void dfs(List<Integer> Leaves,TreeNode root)\n    {\n        if(root==null)\n            return;\n        \n        if(root.left==null && root.right==null) //Leaf\n            Leaves.add(root.val);\n        \n        dfs(Leaves,root.left);\n        dfs(Leaves,root.right);\n        \n        \n        \n    }\n    {\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111","title_slug":"leaf-similar-trees"}
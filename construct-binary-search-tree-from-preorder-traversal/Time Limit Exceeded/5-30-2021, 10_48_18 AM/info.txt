{"id":500217008,"lang":"java","time":"1 month, 3 weeks","timestamp":1622351898,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/500217008/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode bstFromPreorder(int[] preorder) {\n        if(preorder.length==0)\n            return null;\n        return constructPreOrder(preorder,0,preorder.length-1);\n    }\n    \n    private TreeNode constructPreOrder(int[] array,int left,int right)\n    {\n        if(left>right )//base case\n            return null;\n      \n        TreeNode root=new TreeNode(array[left]);\n        int index=0;\n        for(int i=left;i<=right;i++)\n        {\n            if(array[i]>array[left])\n                {index=i;break;}\n        }\n        root.left=constructPreOrder(array,left+1,index-1);\n        root.right=constructPreOrder(array,index,right);\n        return root;\n            \n    }\n}","compare_result":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"construct-binary-search-tree-from-preorder-traversal"}
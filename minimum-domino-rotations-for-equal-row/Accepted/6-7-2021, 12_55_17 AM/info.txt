{"id":504047579,"lang":"java","time":"1 month, 2 weeks","timestamp":1623007517,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/504047579/","is_pending":"Not Pending","title":"Minimum Domino Rotations For Equal Row","memory":"47.2 MB","code":"class Solution {\n    public int minDominoRotations(int[] tops, int[] bottoms) {\n        return Math.min(\n         numSwaps(tops[0],tops,bottoms),\n            Math.min(\n            numSwaps(bottoms[0],tops,bottoms),\n            Math.min(\n            numSwaps(tops[0],bottoms,tops),numSwaps(bottoms[0],bottoms,tops)))\n        )==Integer.MAX_VALUE?-1:Math.min(\n         numSwaps(tops[0],tops,bottoms),\n            Math.min(\n            numSwaps(bottoms[0],tops,bottoms),\n            Math.min(\n            numSwaps(tops[0],bottoms,tops),numSwaps(bottoms[0],bottoms,tops)))\n        );\n        \n        \n    }\n    \n    private int numSwaps(int target,int[] A,int[] B)\n    {\n        int minSwaps=0;\n        for(int i=0;i<A.length;i++)\n        {\n            if(A[i]!=target && B[i]!=target)\n                return Integer.MAX_VALUE; //Because we want minimum so anyone which actually satisfies the cases should be returned that's why we are returning Integer.MAX_VALUE to show that this case is not favourable\n            else if(A[i]!=target)\n                 minSwaps++;\n        }\n        return minSwaps;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-domino-rotations-for-equal-row"}
{"id":512577689,"lang":"java","time":"1Â month","timestamp":1624544889,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/512577689/","is_pending":"Not Pending","title":"Group Anagrams","memory":"42 MB","code":"class Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        HashMap<String, List<String>> anagramsMap = new HashMap<>();\n        \n        for(String str : strs){\n            // Sort the characters of the current word\n            char[] letters = str.toCharArray();\n            Arrays.sort(letters);\n            String sortedStr = new String(letters);\n            \n\t\t\t// If the current sorted word is not available in the map, then add a new entry in the map\n            anagramsMap.putIfAbsent(sortedStr, new ArrayList<>());\n            anagramsMap.get(sortedStr).add(str);\n        }\n        return new ArrayList<>(anagramsMap.values());\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"group-anagrams"}
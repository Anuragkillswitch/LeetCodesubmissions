{"id":499738348,"lang":"java","time":"1 month, 3 weeks","timestamp":1622271792,"status_display":"Accepted","runtime":"49 ms","url":"/submissions/detail/499738348/","is_pending":"Not Pending","title":"Maximum Erasure Value","memory":"52 MB","code":"class Solution {\n    public int maximumUniqueSubarray(int[] nums) {\n        HashSet<Integer> set=new HashSet<>();\n        \n        int i=0;\n        int j=0;\n        int max=0;\n        int sum=0;\n        \n        while(i<nums.length && j<nums.length)\n        {\n            if(!set.contains(nums[j])) //Still unique element subArray\n            {\n                 sum+=nums[j]; //Add the current to the running sum\n                 max=Math.max(max,sum); //Update max sum till this position \n                //I KEEP FORGETTING TO ADD THE JTH ELEMENT TO THE SET\n                 set.add(nums[j]);//How else will we check if there is an element repetition hjehehehheehe\n                 j++; //Go to the next position\n            }else\n            {\n                //This is the case when there is an element repeating \n                //So Remove the ith element from the hashSet and the running sum\n                \n                sum-=nums[i];\n                set.remove(nums[i]);   // 4 2 4  One 4 is removed and the other will be added\n                i++;\n            }\n            \n        }\n        \n        return max;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-erasure-value"}
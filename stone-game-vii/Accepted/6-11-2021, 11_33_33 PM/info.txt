{"id":506479733,"lang":"java","time":"1 month, 1 week","timestamp":1623434613,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/506479733/","is_pending":"Not Pending","title":"Stone Game VII","memory":"38.4 MB","code":"class Solution {\n//     public int stoneGameVII(int[] stones) {\n//         HashMap<Integer,Integer> map=new HashMap<>();\n//         //mapping the indexes which are used to those that are not!\n        \n//         int wholeSum=0;\n      \n//         for(int i=0;i<stones.length;i++)\n//          {   map.put(i,0); //All the indexes are unused!\n//             wholeSum+=stones[i];}\n        \n//         return solve(wholeSum,stones,0,stones.length1-1);\n        \n      \n        \n        \n        \n//     }\n    \n    public int stoneGameVII(int[] stones) {\n    int n = stones.length;\n    int[] dp = new int[n];\n    for(int i = n - 1; i >= 0; i--) {\n        for(int j = i + 1, sum = stones[i]; j < n; j++) {\n            sum += stones[j];\n            dp[j] = Math.max(sum - stones[i] - dp[j], sum - stones[j] - dp[j - 1]);\n        }\n    }\n    return dp[n - 1];\n}\n//     private int solve(int wholeSum,int[] stones,int left,int right)\n//     {\n//         if(left==right)\n//             return 0;\n        \n//         return Math.max\n//     }\n}\n\n// Do not choose the maximum at each step greedily!!!\n//   1   2   3\n//   5  or 3   Choose 5 Alice \n//   2  3           \n//   choose 2 to get 3 Bob\n//   choose 3 to get 0 Alice\n//Difference =2\n\n  \n//         int[] dp=new int[stones.length+1];\n//         dp[0]=0; //No Elements!\n        \n//         dp[1]=0; //One element removed by Alice so the score difference is 0\n    \n         \n//         dp[2]=Math.max(stones[1],stones[0]);","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"stone-game-vii"}
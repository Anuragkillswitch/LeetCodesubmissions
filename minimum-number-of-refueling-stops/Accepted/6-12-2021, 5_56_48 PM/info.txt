{"id":506771005,"lang":"java","time":"1 month, 1 week","timestamp":1623500808,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/506771005/","is_pending":"Not Pending","title":"Minimum Number of Refueling Stops","memory":"39 MB","code":"class Solution {\n    public int minRefuelStops(int target, int startFuel, int[][] stations) {\n        if(startFuel>=target)return 0;\n        \n        int xCurrent=startFuel; //Maximum distance we can reach with current amount of fuel in the tank!\n        \n        int noOfStops=0;\n        \n        PriorityQueue<Integer> maxAvailableFuelSoFar=new PriorityQueue<>((a,b)->(b-a));\n        \n        \n        for(int[] station : stations)\n        {\n            int nextStation=station[0];\n            int fuelInStation=station[1];\n            \n            while(xCurrent<nextStation)\n            {\n                if(maxAvailableFuelSoFar.isEmpty())\n                    return -1;\n                \n              \n                 xCurrent+=maxAvailableFuelSoFar.poll(); //Simulating adding the fuel to our tank!\n                 noOfStops++;\n                \n            }\n            maxAvailableFuelSoFar.offer(fuelInStation);\n        }\n        \n        while(xCurrent<target)\n        {\n            if(maxAvailableFuelSoFar.isEmpty())\n                    return -1;\n                \n              \n                 xCurrent+=maxAvailableFuelSoFar.poll(); //Simulating adding the fuel to our tank!\n                 noOfStops++;\n        }\n        \n        return noOfStops;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-refueling-stops"}
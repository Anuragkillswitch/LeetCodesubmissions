{"id":527915457,"lang":"java","time":"1 hour, 53 minutes","timestamp":1627191782,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/527915457/","is_pending":"Not Pending","title":"Word Ladder II","memory":"40.4 MB","code":"class Solution {\n\n    private class Node {\n        public String value;\n        public Node previous;\n        Node(String value) { this.value = value; }\n        Node(String value, Node previous) {\n            this.value = value;\n            this.previous = previous;\n        }\n    }\n\n\tpublic List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {\n        List<List<String>> res = new ArrayList<>();\n        Set<String> list = new HashSet<>(wordList);\n        Queue<Node> queue = new LinkedList<>();\n        queue.offer(new Node(beginWord));\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            while(size-->0)\n            {Node head = queue.poll();\n                for (String neighborStr : neighbors(list, head.value)) {\n                    Node neighbor = new Node(neighborStr, head);\n                    if (neighbor.value.equals(endWord)) {\n                        addNode(res, neighbor);\n                        break;\n                    }\n                    queue.offer(neighbor);\n                }\n            }\n            if (res.size() > 0) break;\n        }\n        return res;\n    }\n\n\n    private Set<String> neighbors(Set<String> list, String s) {\n            list.remove(s);\n            Set<String> res = new HashSet<>();\n            char[] chars = s.toCharArray();\n            for (int i = 0; i < s.length(); i++) {\n                for (char ch = 'a'; ch <= 'z'; ch++) {\n                    if (chars[i] == ch) continue;\n                    char tmp = chars[i];\n                    chars[i] = ch;\n                    String word = new String(chars);\n                    if (list.contains(word)) res.add(word);\n                    chars[i] = tmp;\n                }\n            }\n            return res;\n        }\n\n\n     private void addNode(List<List<String>> list, Node p) {\n        LinkedList<String> ladder = new LinkedList<>();\n        while (p != null) {\n            ladder.addFirst(p.value);\n            p = p.previous;\n        }\n        list.add(ladder);\n    }\n\n}","compare_result":"11111111111111111111111111111111","title_slug":"word-ladder-ii"}
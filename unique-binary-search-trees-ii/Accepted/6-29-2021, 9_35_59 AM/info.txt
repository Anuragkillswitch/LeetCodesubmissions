{"id":514711734,"lang":"java","time":"3 weeks, 5 days","timestamp":1624939559,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/514711734/","is_pending":"Not Pending","title":"Unique Binary Search Trees II","memory":"39.7 MB","code":"class Solution {\n    public List<TreeNode> generateTrees(int n) {\n        return dfs(1 , n);\n    }\n    \n    public ArrayList<TreeNode> dfs(int start , int end){\n        if(start == end){\n            ArrayList<TreeNode> x = new ArrayList<>();\n            x.add(new TreeNode(start));\n            return x;\n        }\n        ArrayList<TreeNode> ans = new ArrayList<>();\n        for(int i=start;i<=end;i++){\n            \n            ArrayList<TreeNode> left = new ArrayList<>(1);\n            \n            ArrayList<TreeNode> right = new ArrayList<>(1);\n            \n            if(i!=start)\n                left = dfs(start , i-1);\n            else\n                left.add(null);\n            \n            if(i != end)\n                right = dfs(i+1 , end);\n            else\n                right.add(null);\n            \n            for(int j=0;j<left.size();j++){\n                for(int k=0;k<right.size();k++){\n                    TreeNode head = new TreeNode(i);\n                    head.left = left.get(j);\n                    head.right = right.get(k);\n                    ans.add(head);\n                }\n            } \n        }\n        return ans;\n    }\n}","compare_result":"11111111","title_slug":"unique-binary-search-trees-ii"}
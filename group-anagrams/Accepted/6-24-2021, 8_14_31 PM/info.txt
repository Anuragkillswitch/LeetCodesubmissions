{"id":512583960,"lang":"java","time":"1Â month","timestamp":1624545871,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/512583960/","is_pending":"Not Pending","title":"Group Anagrams","memory":"42.3 MB","code":"class Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n if(strs == null || strs.length < 1) return null;\n        List<List<String>> ans = new ArrayList<List<String>>();\n        //each letter in alphabet has prime associated with it\n        int[] primes = new int[]{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101};\n        \n        //For each word, create a product of primes from its letters\n        HashMap<Long, ArrayList<String>> hs = new HashMap<>();\n        \n        for(String s : strs){\n            long sum = 1;\n            char[] c = s.toCharArray();\n            \n            for(char d : c){\n                sum *= primes[d-'a'];\n            }\n\n            if(hs.containsKey(sum)){\n                hs.get(sum).add(s);\n            }else{\n                hs.put(sum, new ArrayList<>());\n                hs.get(sum).add(s);\n            }\n        }\n        \n        for(long l : hs.keySet()){\n            ans.add(hs.get(l));\n        }\n        \n        return ans;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"group-anagrams"}
{"id":492542102,"lang":"java","time":"2 months, 1 week","timestamp":1620892178,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/492542102/","is_pending":"Not Pending","title":"Partition Labels","memory":"N/A","code":"class Solution {\n    public List<Integer> partitionLabels(String s) {\n        List<Integer> ListPartition=new ArrayList<>();\n        \n        int[] LastIndexes=new int[26];\n        \n        for(int i=0;i<s.length();i++)\n        {\n           LastIndexes[s.charAr(i)-'a']=i;\n        }\n        \n        int i=0;\n        while(i<s.length())\n        {\n            int end=LastIndexes[s.charAt(i)-'a'];\n            int j=i+1;\n            while(j!=end)\n            {\n                end=Math.max(end,LastIndexes[s.charAt[j++]-'a']);\n            }\n            ListPartition.add(end-i+1);\n             i=j+1;\n        }\n          return ListPartition; \n    }\n}\n\n\n\n/* Partition the string into parts\nsuch that each part contains some letters and those letters exist \nonly in those parts and not in any other parts\nSo we have to return the minimum size of the partitions\nso that each part fulfills this criteria */","compare_result":null,"title_slug":"partition-labels"}
{"id":497040278,"lang":"java","time":"2Â months","timestamp":1621755471,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/497040278/","is_pending":"Not Pending","title":"Binary Tree Paths","memory":"39.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n \n    public List<String> binaryTreePaths(TreeNode root) {\n        List<String> paths=new ArrayList<>();\n        if(root==null)\n            return paths;\n        \n        dfs(root,\"\",paths);\n        \n        return paths;\n      }\n    \n    public void dfs(TreeNode root,String currentPath,List<String> paths)\n    {\n        currentPath+=root.val; //Adding the current node we're on\n        if(root.left==null && root.right==null) //We're at a leaf node\n          {\n           paths.add(currentPath);    //So we have a path\n            return;              \n           }\n        \n        if(root.left!=null)\n            dfs(root.left,currentPath+\"->\",paths);\n        \n        if(root.right!=null)\n            dfs(root.right,currentPath+\"->\",paths);\n     }\n    \n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-paths"}
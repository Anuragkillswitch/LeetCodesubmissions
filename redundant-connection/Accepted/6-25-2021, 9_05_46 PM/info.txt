{"id":513057177,"lang":"java","time":"4 weeks, 1 day","timestamp":1624635346,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/513057177/","is_pending":"Not Pending","title":"Redundant Connection","memory":"39.4 MB","code":"class dsu{\n    \n    int v;\n    int p[];\n    \n    dsu(int x)\n    {\n        v=x;\n        p=new int[v];\n        for(int i=0;i<v;i++)\n        {\n            p[i]=i;\n        }\n    }\n    \n    public void unite(int x,int y)\n    {\n        int xsp=getsp(x);\n        int ysp=getsp(y);\n        \n        if(xsp!=ysp)\n        p[xsp]=ysp;\n    }\n    \n    public int getsp(int x)\n    {\n        if(x==p[x])\n            return x;\n        \n        return p[x]=getsp(p[x]);\n    }\n    \n    \n    \n    \n}\n\nclass Solution {\n    public int[] findRedundantConnection(int[][] e) {\n      \n        int ans[]=new int[2];\n        dsu g=new dsu(e.length);\n        \n        for(int i=0;i<e.length;i++)\n        {\n            int x=e[i][0];\n            int y=e[i][1];\n            \n            x--;\n            y--;\n            if(g.getsp(x)!=g.getsp(y))\n                g.unite(x,y);\n            \n            else\n            {\n                // cycle\n                // or we can simply return e[i] here\n                ans[0]=x+1;\n                ans[1]=y+1;\n            }\n        }\n        \n        return ans;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection"}
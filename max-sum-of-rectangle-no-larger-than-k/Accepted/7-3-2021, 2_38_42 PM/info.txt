{"id":516687602,"lang":"java","time":"3Â weeks","timestamp":1625303322,"status_display":"Accepted","runtime":"113 ms","url":"/submissions/detail/516687602/","is_pending":"Not Pending","title":"Max Sum of Rectangle No Larger Than K","memory":"39.3 MB","code":"class Solution {\n    int result = Integer.MIN_VALUE;\n\n    // Standard Kadane's algorithm.\n    int getMaxKadane(int[] nums) {\n        int maxKadane = Integer.MIN_VALUE, currentMaxSum = 0;\n        for (int num : nums) {\n            currentMaxSum = Math.max(currentMaxSum + num, num);\n            maxKadane = Math.max(maxKadane, currentMaxSum);\n        }\n        return maxKadane;\n    }\n    void updateResult(int[] nums, int k) {\n        int kadaneSum = getMaxKadane(nums);\n\n        // If max possible sum of any subarray of nums is <= k\n        // use that result to compare with gobal maxium result and return\n        if (kadaneSum <= k) {\n            result = Math.max(result, kadaneSum);\n            return;\n        }\n        int sum = 0;\n\n        // Container to store sorted prefix sums.\n        TreeSet<Integer> sortedSum = new TreeSet<>();\n\n        // Add 0 as the prefix sum for an empty sub-array.\n        sortedSum.add(0);\n        for (int num : nums) {\n            // Running Sum.\n            sum += num;\n\n            // Get X where Running sum - X <= k such that sum - X is closest to k.\n            Integer x = sortedSum.ceiling(sum - k);\n\n            // If such X is found in the prefix sums.\n            // Get the sum of that sub array and update the global maximum result.\n            if (x != null)\n                result = Math.max(result, sum - x);\n\n            // Insert the current running sum to the prefix sums container.\n            sortedSum.add(sum);\n        }\n    }\n    public int maxSumSubmatrix(int[][] matrix, int k) {\n        if (matrix[0].length > matrix.length) {\n            // Stores the 1D representation of the matrix.\n            int[] rowSum = new int[matrix[0].length];\n            for (int i = 0; i < matrix.length; i++) {\n                // Initialize the 1D representation with 0s.\n                Arrays.fill(rowSum, 0);\n                // We convert the matrix between rows i..row inclusive to 1D array\n                for (int row = i; row < matrix.length; row++) {\n                    // Add the current row to the previous row.\n                    // This converts the matrix between i..j to 1D array\n                    for (int col = 0; col < matrix[0].length; col++)\n                        rowSum[col] += matrix[row][col];\n\n                    // Run the 1D algorithm for `rowSum`\n                    updateResult(rowSum, k);\n\n                    // If result is k, this is the best possible answer, so return.\n                    if (result == k)\n                        return result;\n                }\n            }\n        } else {\n            // Stores the 1D representation of the matrix column wise.\n            int[] colSum = new int[matrix.length];\n            for (int i = 0; i < matrix[0].length; i++) {\n                // Initialize the 1D representation with 0s.\n                Arrays.fill(colSum, 0);\n\n                // We convert the matrix between columns i..col inclusive to 1D array\n                for (int col = i; col < matrix[0].length; col++) {\n                    // Add the current column to the previous column.\n                    for (int row = 0; row < matrix.length; row++)\n                        colSum[row] += matrix[row][col];\n\n                    // Run the 1D algorithm for `colSum`\n                    updateResult(colSum, k);\n\n                    // If result is k, this is the best possible answer, so return.\n                    if (result == k)\n                        return result;\n                }\n            }\n        }\n        return result;\n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"max-sum-of-rectangle-no-larger-than-k"}
{"id":507678337,"lang":"java","time":"1 month, 1 week","timestamp":1623654211,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/507678337/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public void flatten(TreeNode root) {\n        if(root==null) return;\n        \n        Stack<TreeNode> stack=new Stack();\n        stack.push(root);\n        \n        while(!stack.isEmpty())\n        {\n            TreeNode currentNode=stack.pop();\n            \n            if(currentNode.left!=null)\n                stack.push(currentNode.left);\n            if(currentNode.right!=null)\n                stack.push(currentNode.right);\n            \n            if(!stack.isEmpty())\n            {\n                currentNode.right=stack.peek();\n            }\n            \n            currentNode.left=null;\n        }\n        return;\n    }\n}","compare_result":"011110111101111011000011011011011000011011000000000000001101100001101110110000110110000000000000011011000011011000000000000000000000000000000000000000000000000110110000110110000000000000011011000011011000000000001000000000000","title_slug":"flatten-binary-tree-to-linked-list"}
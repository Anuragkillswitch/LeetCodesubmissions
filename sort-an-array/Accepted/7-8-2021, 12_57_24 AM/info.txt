{"id":518922144,"lang":"java","time":"2 weeks, 3 days","timestamp":1625686044,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/518922144/","is_pending":"Not Pending","title":"Sort an Array","memory":"47.9 MB","code":"class Solution {\n    public int[] sortArray(int[] nums) {\n        return quickSort(nums);\n    }\n    \n    private int[] quickSort(int[] nums) {\n        if (nums.length <= 1) return nums;\n        this.qHelper(nums, 0, nums.length - 1);\n        return nums;\n    }\n    private void qHelper(int[] nums, int head, int tail) {\n        if (head >= tail) return;\n        int pivot = this.partition(nums, head, tail);\n        this.qHelper(nums, head, pivot-1);\n        this.qHelper(nums, pivot+1, tail);\n    }\n    \n    private int partition(int[] nums, int head, int tail) {\n        // use the index of medium value as pivot point!!!\n        int pivot_index = this.getMediumValueIndex(nums, head, tail);\n        int pivot = nums[pivot_index];\n        // int temp = nums[pivot_index];\n        nums[pivot_index] = nums[tail];\n        nums[tail] = pivot;\n        pivot_index = tail;\n        int i = head - 1;\n        for (int j = head; j < tail; ++j) {\n            if (nums[j] < pivot) {\n                ++i;\n                //swap i and j\n                int temp = nums[i];\n                nums[i] = nums[j];\n                nums[j] = temp;\n            }\n        }\n        // swap i+1 and pivot_index\n        int temp = nums[i+1];\n        nums[i+1] = nums[pivot_index];\n        nums[pivot_index] = temp;\n        return i+1;\n    }\n    \n    private int getMediumValueIndex(int[] nums, int head, int tail) {\n        int mid = head + (tail - head) / 2;\n        int l = nums[head];\n        int m = nums[mid];\n        int r = nums[tail];\n        if (l > m) {\n            // l > m > r\n            if (m > r) return mid;\n            // r > l > m\n            else if (r > l) return head;\n            //l > r > m\n            else return tail;\n        } \n        // m > l\n        else {\n            // r > m > l\n            if (r > m) return mid;\n            // m > l > r\n            else if (l > r) return head;\n            // m > r > l\n            else return tail;\n        }\n    }\n}","compare_result":"1111111111111","title_slug":"sort-an-array"}
{"id":510461219,"lang":"java","time":"1Â month","timestamp":1624164073,"status_display":"Accepted","runtime":"41 ms","url":"/submissions/detail/510461219/","is_pending":"Not Pending","title":"Combinations","memory":"52.3 MB","code":"class Solution {\n    public List<List<Integer>> combine(int n, int k) {\n        List<List<Integer>> result=new ArrayList<>();\n        \n        backtrack(1,n,k,new ArrayList<>(),result);\n        return result;\n    }\n    \n    private void backtrack(int number,int max,int k,List<Integer> current,List<List<Integer>> result)\n    {\n        if(number>max)\n        {\n            if(k==0)\n            {\n                result.add(new ArrayList<>(current));\n                \n            }\n            return;\n        }\n        if(k==0)\n        {\n            result.add(new ArrayList<>(current));\n            return;\n        }\n        if(k<0)return;\n        \n        current.add(number);\n        backtrack(number+1,max,k-1,current,result); //Simulating taking this current number\n        current.remove(current.size()-1);\n        \n        \n        backtrack(number+1,max,k,current,result);//simulating not taking the current number\n        return;\n        \n    }\n}","compare_result":"111111111111111111111111111","title_slug":"combinations"}
{"id":498002254,"lang":"java","time":"2Â months","timestamp":1621934956,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/498002254/","is_pending":"Not Pending","title":"Find Mode in Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    Integer prev=null; //To store the value of the node \n                       //Because for a sorted array \n                       //i.e. For InOrder traversal of BST\n                       //You'd get a sorted array (increasing)\n    int count=1; //A number itself occuring just once\n    int max=0; //We'll update this as we go\n    public int[] findMode(TreeNode root) {\n        //To return we'll use a list because it's dynamically resized\n        \n        List<Integer> modes=new ArrayList<>();\n        \n        Traverse(modes,root);\n        \n        int[] result=new int[modes.size()];\n        \n        for(int i=0;i<modes.size();i++)\n           result[i]=modes.get(i); //I think this should work\n        \n        \n        //We need to return an array so we will convert the list to\n        //an array\n        return result;\n    }\n    \n    //Now we'll write our recursive helper function\n    //Simulating inOrder traversal and comparision @ eachstep\n    \n    private void Traverse(List<Integer> modes,TreeNode root)\n    {\n        //Base cases\n        if(root==null) return;\n        \n        Traverse(modes,root.left); //Left first\n        \n        \n        if(prev!=null) //Because initially it is null so our comparisions won't work\n        {\n            if(prev==root.val) //It has the same value as the previous\n                count++;   //Frequency for that particular value can be increased\n            else\n                count=1;    //Frequency won't grow for this value so we reset count\n        }\n           \n           if(count>max)\n           {\n               max=count; //New max freq is that of the current node val\n               modes.clear(); //Removing all pre=existing nodes to add this new one\n               modes.add(root.val);\n           }else if(count==max) //The frequency of this number is same as the max frq(mode ) so far\n           {\n              modes.add(root.val); //This is the case of multiple modes\n           }else\n           {\n               count=1;\n           }\n           prev=root.val; //We forgot to update the previous when we get to the next node\n           Traverse(modes,root.right); //Right later because we are performing inOrder traversal\n           //As inorder traversal provides us a sorted ascending ordered element list\n           \n           \n           //This should work\n    }\n    \n}","compare_result":"1111111111111100111011","title_slug":"find-mode-in-binary-search-tree"}
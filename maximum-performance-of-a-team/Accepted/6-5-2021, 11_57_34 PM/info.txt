{"id":503483183,"lang":"java","time":"1 month, 2 weeks","timestamp":1622917654,"status_display":"Accepted","runtime":"41 ms","url":"/submissions/detail/503483183/","is_pending":"Not Pending","title":"Maximum Performance of a Team","memory":"50.9 MB","code":"class Solution {\n    public int maxPerformance(int n, int[] speed, int[] efficiency, int k) {\n        int[][] ord = new int[n][2];\n        for (int i = 0; i < n; i++)\n            ord[i] = new int[] {efficiency[i], speed[i]};\n        Arrays.sort(ord, (a, b) -> Integer.compare(b[0], a[0]));\n        PriorityQueue<Integer> sppq = new PriorityQueue<>();\n        long totalSpeed = 0, best = 0;\n        for (int[] pair : ord) {\n            int spd = pair[1];\n            sppq.add(spd);\n            if (sppq.size() <= k) totalSpeed += spd;\n            else totalSpeed += spd - sppq.poll();\n            best = Math.max(best, totalSpeed * pair[0]);\n        }\n        return (int)(best % 1000000007);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"maximum-performance-of-a-team"}
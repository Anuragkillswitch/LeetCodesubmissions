{"id":518922006,"lang":"java","time":"2 weeks, 3 days","timestamp":1625686022,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/518922006/","is_pending":"Not Pending","title":"Sort an Array","memory":"47.9 MB","code":"class Solution {\n  public int[] sortArray(int[] nums) {\n        for (int i = 0; i < nums.length; i++) {\n            heapifyUp(nums, i, i + 1);\n        }\n        \n        int size = nums.length;\n        for (int i = nums.length - 1; i >= 0; i--) {\n            swap(nums, i, 0);\n            heapifyDown(nums, 0, i);\n        }\n        \n        //I used min heap, you can avoid this if you use max heap\n        for (int i = 0; i < nums.length / 2; i++) {\n            swap(nums, i, nums.length - i - 1);\n        }\n        \n        return nums;\n    }\n    \n    private void heapifyUp(int[] arr, int i, int size) {\n        while (hasParent(i)) {\n            if (arr[i] < arr[getParent(i)]) {\n                swap(arr, i, getParent(i));\n                i = getParent(i);\n            } else {\n                break;\n            }\n        }\n    }\n    \n    private void heapifyDown(int[] arr, int i, int size) {\n        while (hasLeftChild(i, size)) {\n            int smaller = getLeftChild(i);\n            if (hasRightChild(i, size) && arr[getRightChild(i)] < arr[smaller]) {\n                smaller = getRightChild(i);\n            }\n            if (arr[i] > arr[smaller]) {\n                swap(arr, i, smaller);\n                i = smaller;\n            } else {\n                break;\n            }\n        }\n    }\n    \n    private void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n    \n    private boolean hasLeftChild(int i, int size) {\n        return 2 * i < size;\n    }\n    \n    private boolean hasRightChild(int i, int size) {\n        return (2 * i + 1) < size;\n    }\n    \n    private boolean hasParent(int i) {\n        return i / 2 >= 0;\n    }\n    \n    private int getLeftChild(int i) {\n        return (2 * i);\n    }\n    \n    private int getRightChild(int i) {\n        return (2 * i + 1);\n    }\n    \n    private int getParent(int i) {\n        return i / 2;\n    }\n}","compare_result":"1111111111111","title_slug":"sort-an-array"}
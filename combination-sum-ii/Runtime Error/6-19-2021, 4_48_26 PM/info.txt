{"id":510095604,"lang":"c","time":"1Â month","timestamp":1624101506,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/510095604/","is_pending":"Not Pending","title":"Combination Sum II","memory":"N/A","code":"void sort(int* nums, int begin, int end)\n{\n    int l=begin, r=end;\n    int v = nums[l+(r-l)/2];\n    while(l <= r)\n    {\n        while(nums[l] < v) l++;\n        while(nums[r] > v) r--;\n        if(l <= r)\n        {\n            int t = nums[l];\n            nums[l] = nums[r];\n            nums[r] = t;\n            l++;\n            r--;\n        }\n    }\n    if(begin < r)\n        sort(nums, begin, r);\n    if(l < end)\n        sort(nums, l, end);\n}\n\nvoid helper(int* nums, int size, int start, int target, int* stack, int top, int*** arr, int** colSizes, int* returnSize)\n{\n    if(target == 0) //valid set, just collect;\n    {\n        *returnSize += 1;\n        *colSizes = (int*)realloc(*colSizes, sizeof(int)*(*returnSize));\n        (*colSizes)[*returnSize-1] = top+1;\n        *arr = (int**)realloc(*arr, sizeof(int*)*(*returnSize));\n        (*arr)[*returnSize-1] = (int*)malloc(sizeof(int)*(top+1));\n        for(int i = 0; i <= top; i++)\n            (*arr)[*returnSize-1][i] = stack[i];\n        return ;\n    }\n    for(int i = start; i < size; i++)\n    {\n        if(nums[i] > target) break; //no need to check further;\n        if(i==start || nums[i]!=nums[i-1]) //only different candidates can be allowed in each traversing level for further traversal;\n        {\n            stack[top+1] = nums[i];\n            helper(nums, size, i+1, target-nums[i], stack, top+1, arr, colSizes, returnSize); //check the next element;\n        }\n    }\n}\n\n//AC - 4ms;\nint** combinationSum2(int* nums, int size, int target, int** colSizes, int* returnSize)\n{\n    sort(nums, 0, size-1);\n    int** arr = (int**)malloc(sizeof(int*));\n    *returnSize = 0;\n    int* stack = (int*)malloc(sizeof(int)*(target/nums[0]+1));\n    int top = -1;\n    helper(nums, size, 0, target, stack, top, &arr, colSizes, returnSize);\n    return arr;\n}","compare_result":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"combination-sum-ii"}
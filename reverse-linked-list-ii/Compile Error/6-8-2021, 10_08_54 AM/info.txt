{"id":504742496,"lang":"java","time":"1 month, 2 weeks","timestamp":1623127134,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/504742496/","is_pending":"Not Pending","title":"Reverse Linked List II","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n     ListNode successor = null;\n    ListNode reverseN(ListNode head, int n) {\n        if (n == 1) {\n            successor = head.next;\n            return head;\n        }\n        ListNode last = reverseN(head.next, n - 1);\n        head.next.next = head;\n        head.next = successor;\n        return last;\n    } \n    \n    public ListNode reverseBetween(ListNode head, int left, int right) {\n       if (m == 1) {\n            // You can also expand the code here to get rid of the helper function 'reverseN'\n            return reverseN(head, n);\n        }\n        head.next = reverseBetween(head.next, m - 1, n - 1);\n        return head;\n        \n        \n    }\n}","compare_result":null,"title_slug":"reverse-linked-list-ii"}
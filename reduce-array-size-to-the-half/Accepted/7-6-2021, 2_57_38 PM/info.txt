{"id":518179243,"lang":"java","time":"2 weeks, 4 days","timestamp":1625563658,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/518179243/","is_pending":"Not Pending","title":"Reduce Array Size to The Half","memory":"54.2 MB","code":"class Solution {\n    public int minSetSize(int[] arr) {\n        Map<Integer,Integer> map = new HashMap();\n        PriorityQueue<Integer> max = new PriorityQueue<>((a,b)-> b.compareTo(a));\n        int last = arr[0],count = 1,need = arr.length/2,cur = arr.length,res = 0;\n        \n        //initialize and create frequency map\n        for(int i = 1;i<arr.length;i++){\n            if(last != arr[i]){\n                map.put(last,map.getOrDefault(last,0) + count);\n                count = 1;\n                last = arr[i];\n            }else{\n                count++;\n            }\n        }\n        map.put(last,map.getOrDefault(last,0) + count);\n        \n        //Create Heap\n        for(int i : map.keySet()){\n            max.add(map.get(i));\n        }\n\t\t\n        //remove elements from heap and subtract from arr.length until we get half of the length.\n\t\t//each freq removed from heap represent an element so increment result by 1\n        while(cur > need){\n            res++;\n            cur -= max.poll();\n        }\n        \n        return res;\n    }\n}","compare_result":"1111111111111111111111111111111","title_slug":"reduce-array-size-to-the-half"}
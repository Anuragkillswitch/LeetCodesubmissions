{"id":512469981,"lang":"java","time":"1Â month","timestamp":1624522983,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/512469981/","is_pending":"Not Pending","title":"Out of Boundary Paths","memory":"37.6 MB","code":"class Solution {\n  int M = 1000000007;\n\n  public int findPaths(int m, int n, int N, int i, int j) {\n    int[][][] memo = new int[m][n][N + 1];\n    for (int[][] l : memo) for (int[] sl : l) Arrays.fill(sl, -1);\n    return findPaths(m, n, N, i, j, memo);\n  }\n\n  public int findPaths(int m, int n, int N, int i, int j, int[][][] memo) {\n    if (i == m || j == n || i < 0 || j < 0) return 1;\n    if (N == 0) return 0;\n    if (memo[i][j][N] >= 0) return memo[i][j][N];\n    memo[i][j][N] = (\n        (findPaths(m, n, N - 1, i - 1, j, memo) + findPaths(m, n, N - 1, i + 1, j, memo)) % M +\n        (findPaths(m, n, N - 1, i, j - 1, memo) + findPaths(m, n, N - 1, i, j + 1, memo)) % M\n    ) % M;\n    return memo[i][j][N];\n  }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"out-of-boundary-paths"}
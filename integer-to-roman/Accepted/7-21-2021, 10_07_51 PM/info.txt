{"id":526104985,"lang":"java","time":"3 days, 14 hours","timestamp":1626885471,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/526104985/","is_pending":"Not Pending","title":"Integer to Roman","memory":"39 MB","code":"/*\n\nURL = https://leetcode.com/problems/integer-to-roman/\n12. Integer to Roman\nSeems highly akin to the dynamic programming \"coin change\" problem!\n\n\nTHOUGHT PROCESS :\n\n- Notice that roman numerals do not encompass 0 => restricted to natural numbers only\n- Always ask if the representation will be working with the largest possible symbols, left -> right\n\n\n*/\nclass Solution \n{\n    \n    \n    \n    public String intToRoman(int num) \n    {\n        \n        // [1] Initialize hashmap keyset and value st : each entry<K,V> pairing\n        // Use of objects entails quick comparisons too with <k,V> values ( versus <char,int>)\n        // From {5,100}, each entails a special case of an offset ( check preceding and subtract 100/10/1 )\n        \n        HashMap<Integer, String> hm = new HashMap<Integer, String>();\n        hm.put(1, \"I\");\n        \n        hm.put(4, \"IV\");\n        hm.put(5, \"V\");\n        \n        hm.put(9, \"IX\");\n        hm.put(10, \"X\");\n\n        hm.put(40, \"XL\");\n        hm.put(50, \"L\");\n        \n        hm.put(90, \"XC\");\n        hm.put(100, \"C\");\n        \n        hm.put(400, \"CD\");\n        hm.put(500, \"D\");\n        \n        hm.put(900, \"CM\");\n        hm.put(1000, \"M\");\n        \n        // [2] Iterate and construct resultant string\n        // The naive idea : iterate the \"offset\" over hashmap ( e,g, in an array of these integers )\n        int[] offsets = new int[]{1000,900,500,400,100,90,50,40,10,9,5,4,1};\n        int i = 0;\n        int offset = offsets[i];\n        StringBuilder sb = new StringBuilder(\"\");\n        while(num > 0)\n        {\n            int diff = num - offset;\n            if(diff >= 0)\n            {\n                sb.append(hm.get(offset));\n                num -= offset;\n            }\n            else\n            {\n                ++i;\n                offset = offsets[i];\n            }\n        }\n        \n        return sb.toString();\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"integer-to-roman"}
{"id":499334367,"lang":"java","time":"1 month, 4 weeks","timestamp":1622186174,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/499334367/","is_pending":"Not Pending","title":"Path Sum II","memory":"41.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {\n      List<List<Integer>> paths=new ArrayList<>();\n        \n        findPaths(root,targetSum,new ArrayList<Integer>(),paths);\n        \n           //new ArrayList is the current path we are taking\n        \n        return paths;\n    }\n    \n    private void findPaths(TreeNode root,int targetSum,List<Integer> currentPath,List<List<Integer>> paths)\n    {\n        if(root==null)\n        {\n            return;\n        }\n        \n        currentPath.add(root.val);\n        if(root.val==targetSum && root.left==null && root.right==null)\n        {\n            paths.add(currentPath);\n            return;\n        }\n        \n        findPaths(root.left,targetSum-root.val,new ArrayList<Integer>(currentPath),paths);\n        \n        findPaths(root.right,targetSum-root.val,new ArrayList<Integer>(currentPath),paths);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-sum-ii"}
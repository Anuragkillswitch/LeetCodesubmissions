{"id":466092700,"lang":"cpp","time":"4 months, 2 weeks","timestamp":1615398292,"status_display":"Accepted","runtime":"164 ms","url":"/submissions/detail/466092700/","is_pending":"Not Pending","title":"The Dining Philosophers","memory":"10.5 MB","code":"class DiningPhilosophers {\nprivate:\n    // one mutex per fork\n    std::array<std::mutex, 5> mutexes;\npublic:\n    DiningPhilosophers() {\n        \n    }\n\n    void wantsToEat(int philosopher,\n                    function<void()> pickLeftFork,\n                    function<void()> pickRightFork,\n                    function<void()> eat,\n                    function<void()> putLeftFork,\n                    function<void()> putRightFork) {\n        \n        // find the left and right fork numbers\n        int left = philosopher;\n        int right = (philosopher + 1) % 5;\n        \n        // ordered lock to avoid deadlock: fork with min number goes first\n        std::lock_guard<std::mutex> first(mutexes[std::min(left, right)]);\n        std::lock_guard<std::mutex> second(mutexes[std::max(left, right)]);\n        \n        // do the work - fork order does not actualy matter here\n        pickLeftFork(); pickRightFork(); eat(); putRightFork(); putLeftFork();\n    }\n};","compare_result":"111111111111111111111111","title_slug":"the-dining-philosophers"}
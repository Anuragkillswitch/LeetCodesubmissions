{"id":508733948,"lang":"java","time":"1 month, 1 week","timestamp":1623841848,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/508733948/","is_pending":"Not Pending","title":"Generate Parentheses","memory":"39 MB","code":"class Solution {\n    \n    static List<String> ans = new ArrayList<>();\n    \n    static void generate(int n,int open, int close, char[] path, int idx){\n        \n        if(n == close){\n            String text = String.copyValueOf(path);\n            \n            ans.add(text);\n            return;\n        }\n        if(idx >= 2*n)\n        {\n            return;\n        }\n        \n        if(open  < n ){\n            path[idx] = '(';\n            generate(n, open+1, close, path, idx+1);\n            path[idx] = '#';\n        }\n        if(close < n && close< open){\n            path[idx] = ')';\n            generate(n, open, close+1, path, idx+1);\n            path[idx] = '#';\n        }\n        \n        \n    }\n    \n    public List<String> generateParenthesis(int n) {\n        ans = new ArrayList<>();\n        char[] path = new char[2*n];\n        generate(n, 0, 0, path, 0);\n        \n        return ans;\n    }\n}","compare_result":"11111111","title_slug":"generate-parentheses"}
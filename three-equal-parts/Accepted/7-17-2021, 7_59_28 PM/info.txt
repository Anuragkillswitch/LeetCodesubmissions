{"id":523932641,"lang":"java","time":"1Â week","timestamp":1626532168,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/523932641/","is_pending":"Not Pending","title":"Three Equal Parts","memory":"53.1 MB","code":"class Solution {\n  public int[] threeEqualParts(int[] arr) {\n    int[] ans = new int[] {-1,-1};\n\n    // num Of 1\n    int numOf1s = 0;\n    for (int el : arr) {\n      numOf1s += el;\n    }\n\n    if (numOf1s == 0) {\n      return new int[]{0, 2};\n    }\n\n    if (numOf1s % 3 != 0) {\n      return ans;\n    }\n\n    int noOfOnesInEachPart = numOf1s / 3;\n    int indexOfFirst1InPart0 = -1;\n    int indexOfFirst1InPart1 = -1;\n    int indexOfFirst1InPart2 = -1;\n    numOf1s = 0;\n    for (int i = 0; i < arr.length; i++) {\n      if (arr[i] == 1) {\n        numOf1s++;\n        if (numOf1s == noOfOnesInEachPart + 1) {\n          indexOfFirst1InPart1 = i;\n        } else if (numOf1s == 2 * noOfOnesInEachPart + 1) {\n          indexOfFirst1InPart2 = i;\n        } else if (numOf1s == 1) {\n          indexOfFirst1InPart0 = i;\n        }\n      }\n    }\n\n    while (indexOfFirst1InPart2 < arr.length) {\n      if (arr[indexOfFirst1InPart2] == arr[indexOfFirst1InPart0] && arr[indexOfFirst1InPart2] == arr[indexOfFirst1InPart1]) {\n        indexOfFirst1InPart2++;\n        indexOfFirst1InPart1++;\n        indexOfFirst1InPart0++;\n      } else {\n        return ans;\n      }\n    }\n\n    return new int[]{indexOfFirst1InPart0 - 1, indexOfFirst1InPart1};\n  }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"three-equal-parts"}
{"id":512512002,"lang":"java","time":"1Â month","timestamp":1624532030,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/512512002/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"39.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    List<Integer> inOrder=new ArrayList<>();\n    public TreeNode deleteNode(TreeNode root, int key) {\n           if(root==null)return root;\n           inOrder(root);\n           return SeekAndDestroy(root,key);\n        \n    }\n    \n    private void inOrder(TreeNode root)\n    {\n        if(root==null)return;\n        \n        inOrder(root.left);\n        inOrder.add(root.val);\n        inOrder(root.right);\n        return;\n    }\n    \n    \n    private TreeNode SeekAndDestroy(TreeNode root,int key)\n    {\n        //1st case null nothing to do\n        if(root==null)return null;\n         if(root.val==key)\n        {\n           if(root.left==null && root.right==null)//If it's a leaf node simply remove it\n               {root=null;return null;}\n            if(root.left!=null)\n            {\n                root.val=InOrderPredecessor(key);\n                root.left=SeekAndDestroy(root.left,root.val);\n                return root;\n            }\n             if(root.right!=null)\n             {\n                 root.val=InOrderSuccessor(key);\n                 root.right=SeekAndDestroy(root.right,root.val);\n                 return root;\n             }\n             \n         \n         }\n        \n        if(root.val<key)\n        {\n            root.right=SeekAndDestroy(root.right,key);\n            \n        }else\n            root.left=SeekAndDestroy(root.left,key);\n         \n        \n        return root;\n    }\n    \n    \n    private int InOrderPredecessor(int key)\n    {\n        for(int i=1;i<inOrder.size();i++)\n        {\n            if(inOrder.get(i)==key)\n                return inOrder.get(i-1);\n        }\n        return -1;\n    }\n    \n    private int InOrderSuccessor(int key)\n    {\n          for(int i=0;i<inOrder.size()-1;i++)\n        {\n            if(inOrder.get(i)==key)\n                return inOrder.get(i+1);\n        }\n        \n        return -1;\n    }\n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-node-in-a-bst"}
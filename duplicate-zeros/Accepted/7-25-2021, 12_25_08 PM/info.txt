{"id":527945330,"lang":"java","time":"41Â minutes","timestamp":1627196108,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/527945330/","is_pending":"Not Pending","title":"Duplicate Zeros","memory":"39 MB","code":"class Solution {\n    \n    //Writes the given value in the given position, if valid.\n    void writeValue(int[] arr, int value, int pos) {\n        if (pos < arr.length)\n            arr[pos] = value;\n    }\n    \n    public void duplicateZeros(int[] arr) {\n        int zeroCount = 0;\n        \n        //Count the number of zeroes.\n        for (int i = 0; i < arr.length; ++i)\n            if (arr[i] == 0)\n                ++zeroCount;\n        \n        int ptr = arr.length - 1;\n        while (ptr >= 0 && zeroCount > 0) {\n            if (arr[ptr] != 0) {\n                //The amount of 'shift' for any element is decided by the number of zeroes remaining to the left.\n                writeValue(arr, arr[ptr], ptr + zeroCount);\n            }\n            else {\n                //Same logic as above, but write two zeroes and decrement the zero count, since we have 'consumed' one zero.\n                writeValue(arr, 0, ptr + zeroCount);\n                writeValue(arr, 0, ptr + zeroCount - 1);\n                --zeroCount;\n            }\n            --ptr;\n        }\n    }\n}","compare_result":"111111111111111111111111111111","title_slug":"duplicate-zeros"}
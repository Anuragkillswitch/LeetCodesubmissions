{"id":508739650,"lang":"java","time":"1 month, 1 week","timestamp":1623843079,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/508739650/","is_pending":"Not Pending","title":"Generate Parentheses","memory":"39.6 MB","code":"class Solution {\n    public List<String> generateParenthesis(int n) {\n        //So let's creat ethe utput data striuctrue fiorsty\n        \n        List<String> outputList=new ArrayList<>();\n        \n        //Magical backtrack functionj\n         backtrack(outputList,\"\",0,0,n);\n        \n         return outputList;\n    }\n    \n    private void backtrack(List<String> outputList,String currentString,int openingParentheses,int closingParentheses,int maxParentheses)\n    {\n        if(currentString.length()==maxParentheses*2)//base case\n        {\n            outputList.add(currentString);\n            return;\n        }\n        \n        if(openingParentheses<maxParentheses)\n            backtrack(outputList,currentString+\"(\",openingParentheses+1,closingParentheses,maxParentheses);\n        \n        if(closingParentheses<openingParentheses)\n            backtrack(outputList,currentString+\")\",openingParentheses,closingParentheses+1,maxParentheses);\n        \n        return;\n    }\n}\n\n//Backtracking problem because Permutations bleh bleh 2^n ish thing","compare_result":"11111111","title_slug":"generate-parentheses"}
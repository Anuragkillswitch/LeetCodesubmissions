{"id":509179104,"lang":"java","time":"1 month, 1 week","timestamp":1623921611,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/509179104/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"39.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        \n        List<List<Integer>> list=new ArrayList<>();\n        if(root==null)return list;\n        Queue<TreeNode> los=new LinkedList<>();\n        \n        los.offer(root);\n        \n        while(!los.isEmpty())\n        {\n            List<Integer> l=new ArrayList<>();\n            int size=los.size();\n            for(int i=0;i<size;i++)\n            {TreeNode current=los.remove();\n             \n             l.add(current.val);\n             if(current.left!=null)\n                 los.offer(current.left);\n             if(current.right!=null)\n                 los.offer(current.right);\n            }\n            list.add(l);\n        }\n        \n        return list;\n    }\n}","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal"}
{"id":494462558,"lang":"java","time":"2 months, 1 week","timestamp":1621264240,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/494462558/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"38.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n\n// 2-> Node has camera\n// 1-> Node is covered by a camera\n// 0-> Node is not covered by any cameras\n\n\n//Space complexity proporitional to H of tree for recursion stack\nclass Solution {\n    int cam;\n    public int minCameraCover(TreeNode root) {\n        cam=0;\n        int ans=dfs(root); //If root was covered we'd get 1 \n        //0,1 or 2         //If it wasn't covered we must add a camera at this postion\n        \n        return (ans==0)?cam+1:cam;\n        \n        \n    }\n    public int dfs(TreeNode node)\n    {\n        if(node==null) return 1; //Leaf's children  will be covered by cam @ leaf\n        \n        int left=dfs(node.left);\n        int right=dfs(node.right);\n        \n         //Now check if we need to add the camera or not\n         //Camera will only be added if my left or right returns 0\n         //So we will add a camera so out child is covered by camera\n        \n        if(left==0 || right==0)\n           {\n            cam++;\n            return 2; //This node has a camera\n            }\n        else if(left==2 || right==2)\n            return 1; //Covered\n        else\n            return 0; //Wasn't covered with camera\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-cameras"}
{"id":504477430,"lang":"java","time":"1 month, 2 weeks","timestamp":1623081995,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/504477430/","is_pending":"Not Pending","title":"Most Common Word","memory":"39 MB","code":"class Solution {\n    public String mostCommonWord(String paragraph, String[] banned) {\n\n        Set<String> bannedWords = new HashSet();\n        for (String word : banned)\n            bannedWords.add(word);\n\n        String ans = \"\";\n        int maxCount = 0;\n        Map<String, Integer> wordCount = new HashMap();\n        StringBuilder wordBuffer = new StringBuilder();\n        char[] chars = paragraph.toCharArray();\n\n        for (int p = 0; p < chars.length; ++p) {\n            char currChar = chars[p];\n\n            // 1). consume the characters in a word\n            if (Character.isLetter(currChar)) {\n                wordBuffer.append(Character.toLowerCase(currChar));\n                if (p != chars.length - 1)\n                    // skip the rest of the processing\n                    continue;\n            }\n\n            // 2). at the end of one word or at the end of paragraph\n            if (wordBuffer.length() > 0) {\n                String word = wordBuffer.toString();\n                // identify the maximum count while updating the wordCount table.\n                if (!bannedWords.contains(word)) {\n                    int newCount = wordCount.getOrDefault(word, 0) + 1;\n                    wordCount.put(word, newCount);\n                    if (newCount > maxCount) {\n                        ans = word;\n                        maxCount = newCount;\n                    }\n                }\n                // reset the buffer for the next word\n                wordBuffer = new StringBuilder();\n            }\n        }\n        return ans;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"most-common-word"}
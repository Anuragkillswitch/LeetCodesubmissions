{"id":513096831,"lang":"java","time":"4 weeks, 1 day","timestamp":1624642340,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/513096831/","is_pending":"Not Pending","title":"Recover Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    TreeNode first=null;\n    TreeNode second=null;\n    TreeNode prev=new TreeNode(Integer.MIN_VALUE);\n    public void recoverTree(TreeNode root) {\n        inOrder(root);\n        int temp=first.val;\n        first.val=second.val;\n        second.val=temp;\n        \n    }\n    private void inOrder(TreeNode root)\n    {\n        if(root==null)\n            return;\n        \n        inOrder(root.left);\n        \n        \n        \n        if(first==null && prev.val>root.val)\n            first=prev.val;\n        \n         if(first!=null && prev.val>root.val)\n            second=prev.val;\n        \n        prev=root;\n        \n        inOrder(root.right);\n    }\n}","compare_result":null,"title_slug":"recover-binary-search-tree"}
{"id":512513018,"lang":"java","time":"1Â month","timestamp":1624532261,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/512513018/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"39.7 MB","code":"class Solution {\n    private int inorder_predecessor(TreeNode root){\n        root = root.left;\n        while(root.right != null) root = root.right;\n        return root.val;\n    }\n    private int inorder_successor(TreeNode root){\n        root = root.right;\n        while(root.left != null) root = root.left;\n        return root.val;\n    }\n    public TreeNode deleteNode(TreeNode root, int key) {\n        if(root == null) return root;\n        if(key > root.val) root.right = deleteNode(root.right, key);\n        else if(key < root.val) root.left = deleteNode(root.left, key);\n        else{\n            if(root.left == null && root.right == null) root = null;\n            else if(root.left != null){ // find inorder predecessor\n                root.val = inorder_predecessor(root);\n                root.left = deleteNode(root.left, root.val);\n            }\n            else { // find inorder successor\n                root.val = inorder_successor(root);\n                root.right = deleteNode(root.right, root.val);\n            }\n        }\n        return root;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-node-in-a-bst"}
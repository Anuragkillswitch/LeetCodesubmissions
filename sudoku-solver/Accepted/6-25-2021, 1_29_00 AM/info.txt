{"id":512705050,"lang":"java","time":"1Â month","timestamp":1624564740,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/512705050/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"36.4 MB","code":"class Solution {\n   // optimised\n    int[] row = new int[9];\n    int[] col = new int[9];\n    int[][] mat = new int[3][3];\n    \n    public boolean solveSudoku_02(char[][] board, ArrayList<Integer> emptyIndex, int idx) {\n        if (idx == emptyIndex.size()) {\n            return true;\n        }\n\n        int oneDEncodedValue = emptyIndex.get(idx); // emptyIndex[idx];\n        int r = oneDEncodedValue / 9;\n        int c = oneDEncodedValue % 9;\n\n        for (int num = 1; num <= 9; num++) {\n            int mask = 1 << num;\n            if ((row[r] & mask) == 0 && (col[c] & mask) == 0 && (mat[r / 3][c / 3] & mask) == 0) {\n                row[r] ^= mask;\n                col[c] ^= mask;\n                mat[r / 3][c / 3] ^= mask;\n\n                board[r][c] = (char) (num + '0');\n                if (solveSudoku_02(board, emptyIndex, idx + 1))\n                    return true;\n                board[r][c] = '.';\n\n                row[r] ^= mask;\n                col[c] ^= mask;\n                mat[r / 3][c / 3] ^= mask;\n\n            }\n        }\n\n        return false;\n    }\n\n    public void solveSudoku(char[][] board) {\n        ArrayList<Integer> emptyIndex = new ArrayList<>();\n        for (int i = 0; i < 9; i++) {\n            for (int j = 0; j < 9; j++) {\n                if (board[i][j] == '.')\n                    emptyIndex.add(i * 9 + j); // emptyIndex.push_back(i * 9 + j);\n                else {\n                    int mask = 1 << (board[i][j] - '0');\n                    row[i] ^= mask;\n                    col[j] ^= mask;\n                    mat[i / 3][j / 3] ^= mask;\n                }\n            }\n        }\n\n        solveSudoku_02(board, emptyIndex, 0);\n    }\n}","compare_result":"111111","title_slug":"sudoku-solver"}
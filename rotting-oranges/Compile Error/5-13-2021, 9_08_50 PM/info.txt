{"id":492672934,"lang":"java","time":"2 months, 1 week","timestamp":1620920330,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/492672934/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"N/A","code":"class Solution {\n    public int orangesRotting(int[][] grid) {\n        Set<String> fresh=new HashSet<>();\n        Set<String> rotten=new HashSet<>();\n        \n        for(int i=0;i<grid.length;i++)\n        {\n            for(int j=0;j<grid[i].length;j++)\n            {\n                if(grid[i][j]==1)\n                    fresh.add(\"\"+i+j); //empty for a key and coordinates of all fresh oranges\n                else if(grid[i][j]==2)\n                    rotten.add(\"\"+i+j);//coordinates of all rotten oranges\n            }\n        }\n        int minutes=0;\n        int [][] directions={{0,1},[1,0],{-1,0},{0,-1}};\n        //Down one cell,right one cell,left one cell,up one cell\n        \n        while(fresh.size()>0)\n        {\n            Set<String> infected=new HashSet<>();\n            for(String s:rotten)\n            {\n                int i=s.charAt(0)-'0';\n                int j=s.charAt(1)-'0';\n                for(int[] direction:directions)\n                {\n                    int nextI=direction[0];\n                    int nextJ=direction[1];\n                    if(fresh.contains(\"\"+nextI+nextJ))\n                    {     fresh.remove(\"\"+nextI+nextJ);\n                      infected.add(\"\"+nextI+nextJ);     \n                }\n            }\n\n        }\n            if(infected.size()==0)\n                return -1;\n            rotten=infected;\n            minutes++; \n            \n        }\n        return minutes;\n        \n}","compare_result":null,"title_slug":"rotting-oranges"}
{"id":498118789,"lang":"java","time":"2Â months","timestamp":1621957297,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/498118789/","is_pending":"Not Pending","title":"Cousins in Binary Tree","memory":"37.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isCousins(TreeNode root, int x, int y) {\n        if(root.val==x || root.val==y)\n            return false;\n        \n        HashMap<Integer,Integer> parents=new HashMap<>();\n        HashMap<Integer,Integer> depths=new HashMap<>();\n        \n        traverse(root,parents,depths,0,0); //ASSSUME DEPTH @ROOT IS 0 & ROOT'S PARENT=0\n        return (parents.get(x)!=parents.get(y) && depths.get(x)==depths.get(y));\n    }\n    private void traverse(TreeNode root,HashMap<Integer,Integer> parents,HashMap<Integer,Integer> depths,int depth,int parent)\n    {\n        if(root==null)\n            return;\n        \n        parents.put(root.val,parent);\n        depths.put(root.val,depth);\n        \n        traverse(root.left,parents,depths,depth+1,root.val); //Current node is parent of left child\n        //Similarly for right child too\n        traverse(root.right,parents,depths,depth+1,root.val); //DEPTH IS INCREASED BY 1\n        //AND THE PARENT IS THE CURRENT NODE\n        \n        //This should work\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"cousins-in-binary-tree"}
{"id":520659633,"lang":"java","time":"2Â weeks","timestamp":1625986110,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/520659633/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"42.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n    TreeNode root;\n    List<Integer> inOrder=new ArrayList<>();\n    int k=0;\n    public BSTIterator(TreeNode root) {\n        this.root=root;\n        helper(root);\n    }\n    private void helper(TreeNode root)\n    {\n        if(root==null)return;\n        helper(root.left);\n        inOrder.add(root.val);\n        helper(root.right);\n        return;\n    }\n    \n    public int next() {\n        return inOrder.get(k++);\n    }\n    \n    public boolean hasNext() {\n        return k<inOrder.size();\n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * int param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}
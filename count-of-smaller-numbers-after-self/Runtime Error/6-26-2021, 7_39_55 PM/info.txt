{"id":513441445,"lang":"python3","time":"4Â weeks","timestamp":1624716595,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/513441445/","is_pending":"Not Pending","title":"Count of Smaller Numbers After Self","memory":"N/A","code":"class Solution {\n    \n    public int find(int fen[], int x) {\n        if(x < 0) return 0;\n        int i = x + 1;\n        int n = fen.length;\n        int sum = 0;\n        while(i > 0) {\n            sum += fen[i - 1];\n            i -= (i & (-i));\n        }\n        return sum;\n    }\n    \n    public void update(int fen[], int x, int val) {\n        int i = x + 1;\n        int n = fen.length;\n        while (i <= n) {\n            fen[i - 1] += val;\n            i += (i & (-i));\n        }\n    }\n    \n    public List<Integer> countSmaller(int[] a) {\n        int n = a.length;\n        \n        // remap the numbers to whole numbers range\n        Map<Integer, Integer> map = new TreeMap<>();\n        for(int i : a) {\n            map.put(i, 0);\n        }\n        int val = 0;\n        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            map.put(entry.getKey(), val);\n            val++;\n        }\n        int arr[] = new int[n];\n        for(int i =0 ; i < n; i++) {\n            arr[i] = map.get(a[i]);\n        }\n        \n        // making fenwick tree\n        int fen[] = new int[val];\n        int ans[] = new int[n];\n        for(int i = n - 1; i >= 0; i--) {\n            ans[i] = find(fen, arr[i] - 1);\n            update(fen, arr[i], 1);\n        }\n        \n        // converting our answer array to list\n        List<Integer> list = new ArrayList<>();\n        for(int i : ans) {\n            list.add(i);\n        }\n        return list;\n    }\n}","compare_result":"00000000000000000000000000000000000000000000000000000000000000000","title_slug":"count-of-smaller-numbers-after-self"}
{"id":514710895,"lang":"java","time":"3 weeks, 5 days","timestamp":1624939423,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/514710895/","is_pending":"Not Pending","title":"Unique Binary Search Trees II","memory":"39.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n  public List<TreeNode> generateTrees(int n) {\n        List[][] dp = new List[n+1][n+1];\n        List<TreeNode>  res =  generateTrees(1,n,dp);\n        return res;\n    }\n\n    public List<TreeNode> generateTrees(int start,int end,List[][] dp) {\n        List<TreeNode> res = new ArrayList<>();\n        if (start > end){\n            res.add(null);\n            return res;\n        }\n\n        if (dp[start][end] != null)\n            return dp[start][end];\n\n        if (start == end) {\n            res.add(new TreeNode(start));\n        } else {\n            for (int i = start; i <= end; i++) {\n                List<TreeNode> leftSubtree = generateTrees(start, i - 1, dp);\n                List<TreeNode> rightSubtree = generateTrees(i + 1, end, dp);\n\n                for (TreeNode left : leftSubtree) {\n                    for (TreeNode right : rightSubtree) {\n                        TreeNode treeNode = new TreeNode(i);\n                        treeNode.left = left;\n                        treeNode.right = right;\n                        res.add(treeNode);\n                    }\n                }\n            }\n        }\n        dp[start][end] = res;\n        return res;\n    }\n}","compare_result":"11111111","title_slug":"unique-binary-search-trees-ii"}
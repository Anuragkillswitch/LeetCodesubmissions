{"id":501204995,"lang":"java","time":"1 month, 3 weeks","timestamp":1622525847,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/501204995/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int minDepth(TreeNode root) {\n        if(root==null)return 0;\n        int left=1+minDepth(root.left);\n        int right=1+minDepth(root.right);\n        //if(left==1 || right==1) //Left is leaf or right is leaf\n           // return left==1?right:left;  //If left is leaf return right? if right is leaf return left ?\n        \n        return Math.min(left,right);\n    }\n}","compare_result":"1011001100010111101001000101000110100001111111110011","title_slug":"minimum-depth-of-binary-tree"}
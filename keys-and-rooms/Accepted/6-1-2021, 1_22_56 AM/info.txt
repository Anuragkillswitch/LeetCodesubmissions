{"id":501008709,"lang":"java","time":"1 month, 3 weeks","timestamp":1622490776,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/501008709/","is_pending":"Not Pending","title":"Keys and Rooms","memory":"38.6 MB","code":"class Solution {\n    private boolean[] marked;\n    public boolean canVisitAllRooms(List<List<Integer>> rooms) {\n        //This problem translates to given a source node 0, is there a path from 0 to every other node? \n        //In other words, are all the nodes in one connected component?\n        marked = new boolean[rooms.size()];\n        DFS(rooms, 0);\n        \n        for (boolean boo : marked)\n        {\n            if (!boo) return false;\n        }\n        return true;\n    }\n    private void DFS(List<List<Integer>> rooms, int v)\n    {\n        marked[v] = true;\n        for (int w : rooms.get(v))\n        {\n            if (!marked[w])\n                DFS(rooms, w);\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"keys-and-rooms"}
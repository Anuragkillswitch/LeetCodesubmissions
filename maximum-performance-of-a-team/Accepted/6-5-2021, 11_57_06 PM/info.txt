{"id":503482986,"lang":"java","time":"1 month, 2 weeks","timestamp":1622917626,"status_display":"Accepted","runtime":"90 ms","url":"/submissions/detail/503482986/","is_pending":"Not Pending","title":"Maximum Performance of a Team","memory":"52.3 MB","code":"class Solution {\n    public int maxPerformance(int n, int[] speed, int[] efficiency, int k) {\n        int modulo = (int) Math.pow(10, 9) + 7;\n        // build tuples of (efficiency, speed)\n        List<Pair<Integer, Integer>> candidates = new ArrayList<>();\n        for (int i = 0; i < n; ++i) {\n            candidates.add(new Pair(efficiency[i], speed[i]));\n        }\n        // sort the members by their efficiencies\n        Collections.sort(candidates, Comparator.comparing(o -> -o.getKey()));\n\n        // create a heap to keep the top (k-1) speeds\n        PriorityQueue<Integer> speedHeap = new PriorityQueue<>((o1, o2) -> o1 - o2);\n\n        long speedSum = 0, perf = 0;\n        for (Pair<Integer, Integer> p : candidates) {\n            Integer currEfficiency = p.getKey();\n            Integer currSpeed = p.getValue();\n            // maintain a heap for the fastest (k-1) speeds\n            if (speedHeap.size() > k - 1) {\n                speedSum -= speedHeap.remove();\n            }\n            speedHeap.add(currSpeed);\n\n            // calculate the maximum performance with\n            // the current member as the least efficient one in the team\n            speedSum += currSpeed;\n            perf = Math.max(perf, speedSum * currEfficiency);\n        }\n        return (int) (perf % modulo);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"maximum-performance-of-a-team"}
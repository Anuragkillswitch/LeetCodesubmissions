{"id":492997014,"lang":"java","time":"2 months, 1 week","timestamp":1620986542,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/492997014/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"39 MB","code":"class Solution {\n    public List<String> letterCombinations(String digits) {\n       List<String> Result=new ArrayList<String>();\n        \n        if(digits==null || digits.length()==0)\n            return Result;\n        \n        String[] mappings={\n            \"0\",\n            \"1\",\n            \"abc\",\n            \"def\",\n            \"ghi\",\n            \"jkl\",\n            \"mno\",\n            \"pqrs\",\n            \"tuv\",\n            \"wxyz\"\n        };\n        \n        LetterCombinationsRecursive(Result,digits,\"\",0,mappings);\n        return Result;\n        \n    }\n    \n    public void LetterCombinationsRecursive(List<String> result,String digits,String current,int index,String[] mappings)\n    {\n        if(index==digits.length())\n        {\n            result.add(current);\n            return;\n        }\n        \n        String letters=mappings[digits.charAt(index)-'0'];\n        for(int i=0;i<letters.length();i++)\n        {\n           LetterCombinationsRecursive(result,digits,current+letters.charAt(i),index+1,mappings);\n        }\n        \n    }\n}","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number"}
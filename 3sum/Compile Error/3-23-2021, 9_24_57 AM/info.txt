{"id":471269937,"lang":"c","time":"4Â months","timestamp":1616471697,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/471269937/","is_pending":"Not Pending","title":"3Sum","memory":"N/A","code":"int** threeSum(int* nums, int numsSize, int* returnSize);\nint cmpInt(const void * a, const void * b);\nint* addSolution(int a, int b, int c);\n\nint** threeSum(int* nums, int numsSize, int* returnSize)\n{\n    int i, j, k;\n    int nc = 0, zc = 0, pc = 0;\n\n    int** r = malloc(sizeof(int*) * numsSize * (numsSize-1) *(numsSize-2) / 6);\n    *returnSize = 0;\n\n    if (numsSize < 3)\n        return r;\n\n    qsort(nums, numsSize, sizeof(int), cmpInt);\n\n    for (i = 0; i < numsSize; i++) {\n        if (nums[i] < 0) nc++;\n        else if (nums[i] == 0) zc++;\n        else pc++;\n    }\n\n    // 3 zeros\n    if (zc >= 3)\n        r[(*returnSize)++] = addSolution(0, 0, 0);\n\n    // 1 zero\n    if (zc >= 1) {\n        for (i = 0, j = numsSize-1; i < nc && j > nc + zc - 1;) {\n            if (nums[i] + nums[j] < 0) i++;\n            else if (nums[i] + nums[j] > 0) j--;\n            else if (i > 0 && nums[i] == nums[i-1]) i++; // Skip repeated number\n            else if (j < numsSize-1 && nums[j] == nums[j+1]) j--; // Skip repeated number\n            else r[(*returnSize)++] = addSolution(nums[i++], 0, nums[j--]);\n        }\n    }\n\n    // 0 zero, 2 negatives\n    if (nc >= 2 && pc >= 1) {\n        for (i = 0; i < nc; i++) {\n            if (nums[i] + nums[numsSize-1] < 0);\n            else if (i > 0 && nums[i] == nums[i-1]);\n            else\n                for (j = i+1, k = numsSize-1; j < nc && k > nc + zc - 1;) {\n                    if (nums[i] + nums[j] + nums[k] < 0) j++;\n                    else if (nums[i] + nums[j] + nums[k] > 0) k--;\n                    else if (j > i+1 && nums[j] == nums[j-1]) j++; // Skip repeated number\n                    else if (k < numsSize-1 && nums[k] == nums[k+1]) k--; // Skip repeated number\n                    else r[(*returnSize)++] = addSolution(nums[i], nums[j++], nums[k--]);\n                }\n        }\n    }\n\n    // 0 zero, 2 positives\n    if (nc >= 1 && pc >= 2) {\n        for (i = numsSize-1; i > nc + zc - 1; i--) {\n            if (nums[i] + nums[0] > 0);\n            else if (i < numsSize-1 && nums[i] == nums[i+1]);\n            else\n                for (j = i-1, k = 0; j > nc + zc - 1 && k < nc;) {\n                    if (nums[i] + nums[j] + nums[k] > 0) j--;\n                    else if (nums[i] + nums[j] + nums[k] < 0) k++;\n                    else if (j < i-1 && nums[j] == nums[j+1]) j--; // Skip repeated number\n                    else if (k > 0 && nums[k] == nums[k-1]) k++; // Skip repeated number\n                    else r[(*returnSize)++] = addSolution(nums[i], nums[j--], nums[k++]);\n                }\n        }\n    }\n    \n    return r;\n}\n\nint cmpInt(const void * a, const void * b)\n{\n    return (*(int*)a - *(int*)b);\n}\n\nint* addSolution(int a, int b, int c)\n{\n    int* sol = malloc(sizeof(int) * 3);\n    sol[0] = a;\n    sol[1] = b;\n    sol[2] = c;\n    return sol;\n}","compare_result":null,"title_slug":"3sum"}
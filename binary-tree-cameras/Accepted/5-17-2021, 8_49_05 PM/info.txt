{"id":494465762,"lang":"c","time":"2 months, 1 week","timestamp":1621264745,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/494465762/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"7.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nint cameras;\n\nint dfs(struct TreeNode* root)\n{\n    if(root==NULL) //The children of leaf nodes are covered obviously\n        return 1;\n    \n    //Now reach the leaf nodes\n    \n     int left=dfs(root->left);\n     int right=dfs(root->right);\n    \n    if(left==0 || right==0) //Either right child or left child are not covered\n    {\n        cameras++;    //Add a camera to this node \n        return 2; \n    }else if(left==2 || right==2)\n    {\n        return 1;   //This node is covered\n    }else\n        return 0; //It's not covered\n}\n\nint minCameraCover(struct TreeNode* root){\n    cameras=0;\n    \n    int ans=dfs(root);\n    /*If dfs of root returns\n       0  --> It is not covered so return cameras+1\n       1  --> It is covered so return cameras\n       2  --> Camera hai is node pe\n      */\n    return (ans==0)? cameras+1:cameras;\n       \n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-cameras"}
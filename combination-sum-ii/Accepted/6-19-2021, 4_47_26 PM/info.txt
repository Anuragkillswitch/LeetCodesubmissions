{"id":510095320,"lang":"java","time":"1Â month","timestamp":1624101446,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/510095320/","is_pending":"Not Pending","title":"Combination Sum II","memory":"39.6 MB","code":"class Solution {\n    public int combinationSum2(int[] arr, int tar, int idx, List<Integer> smallAns, List<List<Integer>> res) {\n        if (tar == 0 || idx >= arr.length) {\n            if (tar == 0) {\n                List<Integer> base = new ArrayList<>(smallAns);\n                res.add(base);\n                return 1;\n            }\n            return 0;\n        }\n            \n        int count = 0;\n\n        if (tar - arr[idx] >= 0) {\n            smallAns.add(arr[idx]);\n            count += combinationSum2(arr, tar - arr[idx], idx + 1, smallAns, res);\n            smallAns.remove(smallAns.size() - 1);\n        }\n\n        idx++;\n        while (idx < arr.length && arr[idx - 1] == arr[idx])\n            idx++;\n\n        count += combinationSum2(arr, tar, idx, smallAns, res);\n        return count;\n    }\n    public List<List<Integer>> combinationSum2(int[] arr, int tar) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> smallAns = new ArrayList<>();\n        Arrays.sort(arr);\n        combinationSum2(arr, tar, 0, smallAns, res);\n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii"}
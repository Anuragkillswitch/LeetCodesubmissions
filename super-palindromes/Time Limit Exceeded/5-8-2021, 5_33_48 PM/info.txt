{"id":490381568,"lang":"c","time":"2 months, 2 weeks","timestamp":1620475428,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/490381568/","is_pending":"Not Pending","title":"Super Palindromes","memory":"N/A","code":"\nint reverseDigits(int num)\n{\n    int rev_num = 0;\n    while (num > 0) {\n        rev_num = rev_num * 10 + num % 10;\n        num = num / 10;\n    }\n    return rev_num;\n}\n \n/* Function to check if n is Palindrome*/\nint isPalindrome(int n)\n{\n \n    // get the reverse of n\n    int rev_n = reverseDigits(n);\n \n    // Check if rev_n and n are same or not.\n    if (rev_n == n)\n        return 1;\n    else\n        return 0;\n}\nint isPerfectSquare(int x)\n{ \n    long long left = 1, right = x;\n   \n    while (left <= right)\n    {\n        long long mid = (left + right) / 2;\n        \n        // Check if mid is perfect square\n        if (mid * mid == x)\n        {\n            return 1;\n        }\n         \n        // Mid is small -> go right to increase mid\n        if (mid * mid < x)\n        {\n            left = mid + 1;\n        }\n       \n        // Mid is large -> to left to decrease mid\n        else\n        {\n            right = mid - 1;\n        }\n    }\n    return 0;\n}\nint superpalindromesInRange(char * left, char * right){\n    int l=atoi(left);\n    int r=atoi(right);\n    int count=0;\n    for(int i=l;i<=r;i++)\n    {\n        int b=sqrt(i);\n        if(isPerfectSquare(i) && isPalindrome(i) && isPalindrome(b))\n            count++;\n    }\n    \n    return count;\n}","compare_result":"1111111111110000000000000000000000000000000000000","title_slug":"super-palindromes"}
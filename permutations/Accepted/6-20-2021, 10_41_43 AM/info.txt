{"id":510472483,"lang":"java","time":"1Â month","timestamp":1624165903,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/510472483/","is_pending":"Not Pending","title":"Permutations","memory":"39.6 MB","code":"class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> res = new ArrayList<>(); //list to store results\n        boolean [] vis = new boolean[nums.length]; // array to keep track of visited numbers\n        helper( nums,0, res, new ArrayList<Integer>(),vis); \n        return res;\n    }\n    \n    public void helper(int[] nums, int index, List<List<Integer>> res ,List<Integer> list, boolean[]vis){\n        int n = nums.length;\n        if(index == nums.length){\n            res.add(new ArrayList(list));\n            return;\n        }\n        \n        for(int i= 0; i < n; i++){\n            if(vis[i] == false){\n                list.add(nums[i]);\n                vis[i] = true;\n                helper(nums,index+1, res, list,vis);\n                list.remove(list.size() - 1);\n                vis[i] = false;\n            }\n        }\n        \n    }\n}","compare_result":"11111111111111111111111111","title_slug":"permutations"}
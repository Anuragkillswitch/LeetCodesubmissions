{"id":512481581,"lang":"java","time":"1Â month","timestamp":1624525331,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/512481581/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isCompleteTree(TreeNode root) {\n        boolean SeenANull=false;\n        \n        Queue<TreeNode> queue=new LinkedList<>();\n        \n        queue.offer(root);\n        \n        while(!queue.isEmpty())\n        {\n            int size=queue.size();\n            for(int i=0;i<size;i++)\n            {\n                TreeNode Current=queue.poll();\n                if(Current==null)seenANull=true;\n                else{if(seenANull)return false;if(Current.left!=null)queue.offer(Current.left);\n                if(Current.right!=null)queue.offer(Current.right);}\n            }\n        }\n        \n        return true;\n    }\n}","compare_result":null,"title_slug":"check-completeness-of-a-binary-tree"}
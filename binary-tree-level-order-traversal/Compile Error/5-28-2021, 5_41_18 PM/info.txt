{"id":499415494,"lang":"java","time":"1 month, 3 weeks","timestamp":1622203878,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/499415494/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> LOT=new ArrayList<>();\n        if(root==null) return LOT;\n       Queue<TreeNode> queue=new LinkedList<>();\n        queue.add(root);\n        \n        while(!queue.isEmpty())\n        {\n            int size=queue.size();\n            List<Integer> CurrentLevel=new ArrayList<>();\n            \n            \n            for(int i=0;i<size;i++)\n            {\n                TreeNode currentNode=queue.remove();\n                CurrentLevel.add(currentNode.val);\n                if(currentNode.left!=null)\n                     queue.add(current.left);\n                if(currentNode.right!=null)\n                    queue.add(current.right);\n            }\n            LOT.add(CurrentLevel);\n        }\n        \n        return LOT;\n    }\n}","compare_result":null,"title_slug":"binary-tree-level-order-traversal"}
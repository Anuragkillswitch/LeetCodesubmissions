{"id":482485743,"lang":"c","time":"3 months, 1 week","timestamp":1618809612,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/482485743/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"6 MB","code":"#define char_to_int(c) ((c) - '0')\n\n#define MAX(a, b) ((a) > (b)? (a) : (b))\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** letterCombinations(char * digits, int* returnSize)\n{\n    char *pad[] = {\"\", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n    int nextSize;\n    \n    if (digits[0] == '\\0') {\n        *returnSize = 0;\n        return NULL;\n    }\n\n    char c = digits[0];\n    int d = char_to_int(c);\n    char **next = letterCombinations(digits + 1, &nextSize);\n    int i, j, len_digits = strlen(pad[d]);\n    char **res;\n    res = malloc(sizeof(char *) * len_digits * MAX(1, nextSize));\n    *returnSize = 0;\n  \n    for (i = 0; i < len_digits; i++) {\n        c = pad[d][i];\n        if (nextSize == 0) {\n            int len = 1 + 1;\n            char *s = malloc(len);\n            sprintf(s, \"%c\", c);\n            res[*returnSize] = s;\n            (*returnSize)++;\n        }\n        for (j = 0; j < nextSize; j++) {\n            int len = strlen(next[j]) + 1 + 1;\n            char *s = malloc(len);\n            sprintf(s, \"%c%s\", c, next[j]);\n            res[*returnSize] = s;\n            (*returnSize)++;\n        }\n    }\n    \n    return res;\n}","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number"}
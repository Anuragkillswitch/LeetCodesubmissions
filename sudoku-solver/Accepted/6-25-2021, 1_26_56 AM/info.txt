{"id":512704328,"lang":"c","time":"1Â month","timestamp":1624564616,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/512704328/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"6 MB","code":"\nint free1(char** board,int *row, int *col ) {\n    \n    for(int i=0; i<9; i++){\n        for(int j=0; j<9; j++) {\n            if(board[i][j] == '.') {\n                *row = i;\n                *col = j;\n                 return 1;\n            }\n           \n        }\n        \n    }\n        return 0;\n}\n\nint safe(char **board, int row, int col, int num) {\n    \n    //check on col\n    int x,y;\n    for(int i=0; i<9; i++) {\n        \n        if(board[i][col] - '0' ==  num)\n            return 0;\n    }\n    \n    //check on row\n    \n    for(int i=0; i<9; i++) {\n        \n        if(board[row][i] - '0' == num)\n            return 0;\n    }       \n    \n    //check on 3*3 grid;\n    x = row - (row%3);\n    y = col - (col%3);\n    \n    for(int i=0; i<3; i++) {\n        for(int j=0; j<3; j++) {\n            \n            if(board[i+x][j+y]-'0' == num)\n                return 0;\n            \n        }\n        \n    }\n    \n    return 1;\n}\n\nint help(char** board){\n    \n    int row, col;\n    \n    if(free1(board, &row, &col) == 0)\n        return 1;\n    \n    \n    for(int i=1; i<=9; i++) {\n        \n            if(safe(board,row,col,i)) {    \n        \n                \n                board[row][col] = i+'0';\n        \n                if(help(board))\n                    return 1;\n                //backtracking\n                board[row][col] = '.';\n            }\n        \n    }//end of for for placing numbers\n            return 0;\n\n}\nvoid solveSudoku(char** board, int boardSize, int* boardColSize){\n    \n        help(board);\n\n}","compare_result":"111111","title_slug":"sudoku-solver"}
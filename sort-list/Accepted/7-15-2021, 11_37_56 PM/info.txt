{"id":523077522,"lang":"java","time":"1 week, 2 days","timestamp":1626372476,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/523077522/","is_pending":"Not Pending","title":"Sort List","memory":"47.7 MB","code":"\nclass Solution {\n    ListNode tail = new ListNode();\n    ListNode nextSubList = new ListNode();\n\n    public ListNode sortList(ListNode head) {\n        if (head == null || head.next == null)\n            return head;\n        int n = getCount(head);\n        ListNode start = head;\n        ListNode dummyHead = new ListNode();\n        for (int size = 1; size < n; size = size * 2) {\n            tail = dummyHead;\n            while (start != null) {\n                if (start.next == null) {\n                    tail.next = start;\n                    break;\n                }\n                ListNode mid = split(start, size);\n                merge(start, mid);\n                start = nextSubList;\n            }\n            start = dummyHead.next;\n        }\n        return dummyHead.next;\n    }\n\n    ListNode split(ListNode start, int size) {\n        ListNode midPrev = start;\n        ListNode end = start.next;\n        //use fast and slow approach to find middle and end of second linked list\n        for (int index = 1; index < size && (midPrev.next != null || end.next != null); index++) {\n            if (end.next != null) {\n                end = (end.next.next != null) ? end.next.next : end.next;\n            }\n            if (midPrev.next != null) {\n                midPrev = midPrev.next;\n            }\n        }\n        ListNode mid = midPrev.next;\n        midPrev.next = null;\n        nextSubList = end.next;\n        end.next = null;\n        // return the start of second linked list\n        return mid;\n    }\n\n    void merge(ListNode list1, ListNode list2) {\n        ListNode dummyHead = new ListNode();\n        ListNode newTail = dummyHead;\n        while (list1 != null && list2 != null) {\n            if (list1.val < list2.val) {\n                newTail.next = list1;\n                list1 = list1.next;\n                newTail = newTail.next;\n            } else {\n                newTail.next = list2;\n                list2 = list2.next;\n                newTail = newTail.next;\n            }\n        }\n        newTail.next = (list1 != null) ? list1 : list2;\n        // traverse till the end of merged list to get the newTail\n        while (newTail.next != null) {\n            newTail = newTail.next;\n        }\n        // link the old tail with the head of merged list\n        tail.next = dummyHead.next;\n        // update the old tail to the new tail of merged list\n        tail = newTail;\n    }\n\n    int getCount(ListNode head) {\n        int cnt = 0;\n        ListNode ptr = head;\n        while (ptr != null) {\n            ptr = ptr.next;\n            cnt++;\n        }\n        return cnt;\n    }\n}\n","compare_result":"1111111111111111111111111111","title_slug":"sort-list"}
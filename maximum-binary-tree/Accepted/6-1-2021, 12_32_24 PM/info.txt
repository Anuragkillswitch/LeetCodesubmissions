{"id":501237798,"lang":"java","time":"1 month, 3 weeks","timestamp":1622530944,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/501237798/","is_pending":"Not Pending","title":"Maximum Binary Tree","memory":"51.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\n        return helper(nums,0,nums.length-1);\n        \n    }\n    private TreeNode helper(int[] nums,int left,int right)\n    {\n        if(left>right)\n            return null;\n        \n        int max=Integer.MIN_VALUE;\n     \n        for(int i=left;i<=right;i++)\n             max=Math.max(max,nums[i]);\n        \n        int index=left;\n        for(int i=left;i<=right;i++)\n        {\n            if(nums[i]==max)\n              {  index=i;break;}\n        }\n        \n        TreeNode root=new TreeNode(max);\n        root.left=helper(nums,left,index-1);\n        root.right=helper(nums,index+1,right);\n        return root;\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-binary-tree"}
{"id":512584600,"lang":"c","time":"1Â month","timestamp":1624545975,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/512584600/","is_pending":"Not Pending","title":"Group Anagrams","memory":"21.9 MB","code":"#define TABLE_SIZE 24593\n\ntypedef struct Node\n{\n    char *val;\n    struct Node *next;\n} Node;\n\ntypedef struct Entry\n{\n    char *key;\n    int listSize;\n    struct Node *wordList;\n    struct Entry *next;\n} Entry;\n\ntypedef struct HashTable\n{\n    int tableSize;\n    struct Entry **buckets;\n} HashTable;\n\nHashTable *createTable()\n{\n    HashTable *ht = calloc(1, sizeof(HashTable));\n    ht->buckets = calloc(TABLE_SIZE, sizeof(Entry));\n    \n    return ht;\n}\n\nunsigned long hash(unsigned char *str)\n{\n    unsigned long hash = 5381;\n    int c;\n\n    while (c = *str++)\n        hash = ((hash << 5) + hash) + c;\n\n    return hash % TABLE_SIZE;\n}\n\nEntry *search(HashTable *ht, char *key)\n{\n    int index = hash(key);\n    \n    if (ht->buckets[index] == NULL)\n        return NULL;\n    \n    Entry *bucket = ht->buckets[index];\n    while (bucket)\n    {\n        if (!strcmp(bucket->key, key))\n            return bucket;\n        \n        bucket = bucket->next;\n    }\n    \n    return NULL;\n}\n\nvoid insert(HashTable *ht, char *key, char *val)\n{\n    Entry *bucket = search(ht, key);\n        \n    if (bucket == NULL)\n    {\n        bucket = calloc(1, sizeof(Entry));\n        bucket->key = malloc(sizeof(char) * (strlen(key) + 1));\n        strcpy(bucket->key, key);\n        bucket->listSize = 1;\n        \n        int index = hash(key);\n        bucket->next = ht->buckets[index];\n        ht->buckets[index] = bucket;\n        ht->tableSize++;\n    }\n    \n    Node *newNode = calloc(1, sizeof(Node));\n    newNode->val = malloc(sizeof(char) * (strlen(val) + 1));\n    strcpy(newNode->val, val);\n    \n    if (bucket->wordList == NULL)\n    {\n        bucket->wordList = newNode;\n        return;\n    }\n    \n    newNode->next = bucket->wordList;\n    bucket->wordList = newNode;\n    bucket->listSize++;\n}\n\nint comp(const void *a, const void *b) \n{ \n    return *(char *)a - *(char *)b; \n}\n\nchar ***groupAnagrams(char **strs, int strsSize, int *returnSize, int **returnColumnSizes)\n{\n    *returnSize = 0;\n    char ***res = NULL;\n    HashTable *ht = createTable();\n    char buf[128];\n   \n    for (int i = 0; i < strsSize; i++)\n    {\n        int len = strlen(strs[i]);\n        strncpy(buf, strs[i], len + 1);\n        qsort(buf, len, sizeof(char), comp);\n        \n        insert(ht, buf, strs[i]);\n    }\n    \n    *returnSize = ht->tableSize;\n    res = malloc(sizeof(char **) * (*returnSize));\n    *returnColumnSizes = malloc(*returnSize * sizeof(int));\n    int listCounter = 0, wordCounter = 0;\n    \n    for (int i = 0; i < TABLE_SIZE; i++)\n    {\n        Entry *bucket = ht->buckets[i];\n        \n        if (bucket == NULL)\n            continue;\n\n        while (bucket)\n        {\n            (*returnColumnSizes)[listCounter] = bucket->listSize;\n            res[listCounter] = malloc(sizeof(char *) * bucket->listSize);\n            \n            for (Node *cur = bucket->wordList; cur; cur = cur->next)\n            {\n                res[listCounter][wordCounter] = calloc(strlen(cur->val) + 1, sizeof(char));\n                strcpy((res)[listCounter][wordCounter++], cur->val);\n            }\n            \n            listCounter++;\n            wordCounter = 0;\n            \n            bucket = bucket->next;\n        }\n    }\n    \n    return res;\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"group-anagrams"}
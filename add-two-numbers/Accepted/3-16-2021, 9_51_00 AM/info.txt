{"id":468374939,"lang":"c","time":"4 months, 1 week","timestamp":1615868460,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/468374939/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"7.9 MB","code":"struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\n    int carry = 0;\n    struct ListNode* node;\n    struct ListNode* last;\n    struct ListNode* root = NULL;\n    \n    if (l1 == NULL && l2 == NULL) {\n        return NULL;\n    }\n    \n    node = malloc(sizeof(struct ListNode));\n    root = node;\n    \n    while (l1 != NULL && l2 != NULL) {\n        int result = l1->val + l2->val + carry;\n        \n        l1 = l1->next;\n        l2 = l2->next;\n        \n        node->val = result % 10;\n        node->next = malloc(sizeof(struct ListNode));\n        last = node;\n        node = node->next;\n        \n        carry = result / 10;\n    }\n    \n    while (l1 != NULL) {\n        int result = l1->val + carry;\n        \n        l1 = l1->next;\n        \n        node->val = result % 10;\n        node->next = malloc(sizeof(struct ListNode));\n        last = node;\n        node = node->next;\n        \n        carry = result / 10;\n    }\n    \n    while (l2 != NULL) {\n        int result = l2->val + carry;\n        \n        l2 = l2->next;\n        \n        node->val = result % 10;\n        node->next = malloc(sizeof(struct ListNode));\n        last = node;\n        node = node->next;\n        \n        carry = result / 10;\n    }\n    \n    if (carry > 0) {\n        node->val = carry;\n        node->next = NULL;\n    } else {\n        free(node);\n        last->next = NULL;\n    }\n\n    return root;\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"add-two-numbers"}
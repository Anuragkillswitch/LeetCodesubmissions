{"id":493832688,"lang":"java","time":"2 months, 1 week","timestamp":1621145289,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/493832688/","is_pending":"Not Pending","title":"Max Area of Island","memory":"39.8 MB","code":"class Solution {\n    public int maxAreaOfIsland(int[][] grid) {\n       //  dfs? and sink\n        \n        int MaxArea=0;\n        \n        for(int i=0;i<grid.length;i++)\n        {\n            for(int j=0;j<grid[i].length;j++)\n            {\n                if(grid[i][j]==1)\n                {\n                    MaxArea=Math.max(findArea(grid,i,j),MaxArea);  //Sink and calc area\n                }\n                 \n            }\n           \n        }\n        \n        return MaxArea;\n    }\n    \n    public int findArea(int[][] grid,int i,int j)\n    {\n        if(i<0 || i>=grid.length || j<0 || j>=grid[i].length || grid[i][j]==0)\n             return 0;\n        \n        grid[i][j]=0; //Sinking\n        int count=1; //The cell we are on and then \n        count+=findArea(grid,i+1,j)+findArea(grid,i-1,j)+findArea(grid,i,j+1)+findArea(grid,i,j-1);         //Adding the surrounding cells\n        return count;\n        \n        \n    }\n}","compare_resulttitle_slug":"max-area-of-island"}
{"id":505507911,"lang":"java","time":"1 month, 2 weeks","timestamp":1623256802,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/505507911/","is_pending":"Not Pending","title":"Jump Game VI","memory":"115.2 MB","code":"class Solution {\n    public int maxResult(int[] nums, int k) {\n        int dp[] = new int[nums.length];\n        dp[0] = nums[0];\n        Deque<int[]> queue = new ArrayDeque<>();\n        queue.addLast(new int[]{0, dp[0]});\n        \n        for(int i = 1; i < nums.length; i++) {\n\t\t\t//remove all elements that more than k dist away\n\t\t\twhile(queue.peekFirst()[0] < i - k) {\n                queue.pollFirst();\n            }\n\t        //first element in the queue is always the max element\t\n            dp[i] = queue.peekFirst()[1] + nums[i];\n\t        \n\t\t\t//remove all elements from right that are smaller than cur element, \n\t\t\t//since they can never be used as max\n            while(!queue.isEmpty() && queue.peekLast()[1] < dp[i]){\n                queue.pollLast();\n            }\n            queue.addLast(new int[]{i, dp[i]});\n        }\n        \n        return dp[nums.length - 1];\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"jump-game-vi"}
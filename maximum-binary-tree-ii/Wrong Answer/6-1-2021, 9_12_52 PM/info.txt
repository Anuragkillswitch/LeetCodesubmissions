{"id":501417230,"lang":"java","time":"1 month, 3 weeks","timestamp":1622562172,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/501417230/","is_pending":"Not Pending","title":"Maximum Binary Tree II","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    List<Integer> l;\n    public TreeNode insertIntoMaxTree(TreeNode root, int val) {\n         if(val>root.val)\n         {\n             TreeNode b=new TreeNode(val);\n             b.left=root;\n             return b;\n         }\n        l=new ArrayList<>();\n        l.add(val);\n        populate(root);//Populate the list with all node values\n        return construct(0,l.size()-1);\n        \n    }\n    \n    private TreeNode construct(int left,int right)\n    {\n        if(left>right)\n             return null;\n        int max=Integer.MIN_VALUE;\n        for(int i=left;i<=right;i++)\n        {\n            max=Math.max(max,l.get(i));\n        }\n        \n        int index=left;\n        \n        for(int i=left;i<=right;i++)\n        {\n            if(max==l.get(i))\n                {index=i;break;}\n        }\n        \n        TreeNode root=new TreeNode(l.get(index));\n        if(left==right)\n            return root;\n        \n        root.left=construct(left,index-1);\n        root.right=construct(index+1,right);\n        return root;\n        \n    }\n    \n    private void populate(TreeNode root)\n    {\n        if(root==null)return;\n         l.add(root.val);\n        populate(root.left);\n       \n        populate(root.right);\n        return;\n    }\n}","compare_result":"100101100000010000010000001010000000000000001000000000000000000000000000000","title_slug":"maximum-binary-tree-ii"}
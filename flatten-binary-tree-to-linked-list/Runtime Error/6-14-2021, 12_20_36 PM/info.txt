{"id":507673549,"lang":"java","time":"1 month, 1 week","timestamp":1623653436,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/507673549/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public void flatten(TreeNode root) {\n        List<Integer> l=new ArrayList<>();\n        \n        preOrder(root,l); //Populating the list\n        \n        root.val=l.get(0);\n        TreeNode prev=root;\n        root.left=null;\n        for(int i=1;i<l.size();i++)\n        {   TreeNode boot=new TreeNode(l.get(i));\n            prev.right=boot;\n            prev=boot;\n            boot=boot.right;\n        }\n        \n    }\n    \n    private void preOrder(TreeNode root,List<Integer> l)\n    {\n        if(root==null)return;\n        \n        l.add(root.val);\n        preOrder(root.left,l);\n        preOrder(root.right,l);\n        return;\n    }\n}","compare_result":"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"flatten-binary-tree-to-linked-list"}
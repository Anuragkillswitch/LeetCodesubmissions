{"id":499308097,"lang":"java","time":"1 month, 4 weeks","timestamp":1622181624,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/499308097/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"49.2 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n\n//Slow pointer Fast Pointer\n\n\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n        ListNode slow=head,fast=head;\n        \n        while(fast!=null && fast.next!=null)\n        {\n            fast=fast.next.next;\n            slow=slow.next;\n        }\n        \n        slow=reversed(slow);\n        fast=head;\n        \n        while(slow!=null)\n        {\n            if(slow.val!=fast.val)\n                 return false;\n            \n            slow=slow.next;\n            fast=fast.next;\n        }\n        \n        return true;\n    }\n    \n    private ListNode reversed(ListNode node)\n    {\n        ListNode prev=null;\n        while(node!=null)\n        {\n            ListNode next=node.next;\n            node.next=prev;\n            prev=node;\n            node=next;\n        }\n        \n        return prev;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list"}
{"id":522536864,"lang":"java","time":"1 week, 3 days","timestamp":1626282800,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/522536864/","is_pending":"Not Pending","title":"Pacific Atlantic Water Flow","memory":"40.2 MB","code":"//DFS\n\nclass Solution {\n    int[][] heights;\n    int M;\n    int N;\n\n    public List<List<Integer>> pacificAtlantic(int[][] heights) {\n        this.heights = heights;\n        List<List<Integer>> res = new LinkedList<>();\n\n        // DFS First row and first col\n        this.M = heights.length;\n        this.N = heights[0].length;\n        boolean[][] pacificTable = new boolean[M][N];\n        iterateRow(0, pacificTable);\n        iterateCol(0, pacificTable);\n\n        // DFS Last Row and last col\n        boolean[][] atlanticTable = new boolean[M][N];\n        iterateRow(M - 1, atlanticTable);\n        iterateCol(N - 1, atlanticTable);\n\n        // add coordinates that are both visited from two tables to the res list\n        for (int i = 0; i < M; i++) {\n            for (int j = 0; j < N; j++) {\n                if (atlanticTable[i][j] == true && pacificTable[i][j] == true) {\n                    res.add(Arrays.asList(new Integer[] { i, j }));\n                }\n            }\n        }\n        // return the res list\n        return res;\n    }\n\n    private void DFS(int row, int col, boolean[][] visited) {\n        visited[row][col] = true;\n\n        int curCellVal = heights[row][col];\n\n        // Top\n        if (0 <= row - 1 && heights[row - 1][col] >= curCellVal && visited[row - 1][col] == false) {\n            DFS(row - 1, col, visited);\n        }\n        // Left\n        if (0 <= col - 1 && heights[row][col - 1] >= curCellVal && visited[row][col - 1] == false) {\n            DFS(row, col - 1, visited);\n        }\n        // Right\n        if (col + 1 < N && heights[row][col + 1] >= curCellVal && visited[row][col + 1] == false) {\n            DFS(row, col + 1, visited);\n        }\n        // Down\n        if (row + 1 < M && heights[row + 1][col] >= curCellVal && visited[row + 1][col] == false) {\n            DFS(row + 1, col, visited);\n        }\n    }\n\n    private void iterateRow(int row, boolean[][] visited) {\n        int totalCols = N;\n        for (int i = 0; i < totalCols; i++) {\n            int col = i;\n            DFS(row, col, visited);\n        }\n    }\n\n    private void iterateCol(int col, boolean[][] visited) {\n        int totalRows = M;\n        for (int i = 0; i < totalRows; i++) {\n            int row = i;\n            DFS(row, col, visited);\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"pacific-atlantic-water-flow"}
{"id":513487966,"lang":"java","time":"4Â weeks","timestamp":1624721183,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/513487966/","is_pending":"Not Pending","title":"Maximum Alternating Subsequence Sum","memory":"N/A","code":"class Solution {\n    public long maxAlternatingSum(int[] nums) {\n        if(nums.length==1)return (long)nums[0];\n        List<Integer> arr=new ArrayList<>();\n        for(int c : nums)\n            arr.add(c);\n        \n        return maxPossibleDiff(arr,arr.size());\n    }\n    private long maxPossibleDiff(List<Integer> arr, int N)\n{\n     \n    // Convert arr[] into 1-based indexing\n    arr.add(-1);\n \n    // Reverse the array\n    Collections.reverse(arr);\n \n    // Convert arr[] into 1 based index\n    arr.add(-1);\n \n    // Reverse the array\n    Collections.reverse(arr);\n \n    // Stores maximum difference between\n    // sum of even and odd indexed elements\n    long maxDiff = 0;\n \n    // Traverse the array\n    for(int i = 1; i <= N; i++)\n    {\n         \n        // If arr.get(i) is local maxima\n        if (arr.get(i) > arr.get(i - 1) &&\n            arr.get(i) > arr.get(i + 1))\n        {\n             \n            // Update maxDiff\n            maxDiff += (long)arr.get(i);\n        }\n \n        // If arr.get(i) is local minima\n        if (arr.get(i) < arr.get(i - 1) &&\n            arr.get(i) < arr.get(i + 1))\n        {\n             \n            // Update maxDiff\n            maxDiff -= (long)arr.get(i);\n        }\n    }\n   return maxDiff;\n}\n}","compare_result":"111110111111011111011111111101111111101111110110110101001111001","title_slug":"maximum-alternating-subsequence-sum"}
{"id":505543599,"lang":"java","time":"1 month, 2 weeks","timestamp":1623261758,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/505543599/","is_pending":"Not Pending","title":"Super Egg Drop","memory":"51 MB","code":"class Solution {\n    public int superEggDrop(int K, int N) {\n        // Right now, dp[i] represents dp(1, i)\n        int[] dp = new int[N+1];\n        for (int i = 0; i <= N; ++i)\n            dp[i] = i;\n\n        for (int k = 2; k <= K; ++k) {\n            // Now, we will develop dp2[i] = dp(k, i)\n            int[] dp2 = new int[N+1];\n            int x = 1;\n            for (int n = 1; n <= N; ++n) {\n                // Let's find dp2[n] = dp(k, n)\n                // Increase our optimal x while we can make our answer better.\n                // Notice max(dp[x-1], dp2[n-x]) > max(dp[x], dp2[n-x-1])\n                // is simply max(T1(x-1), T2(x-1)) > max(T1(x), T2(x)).\n                while (x < n && Math.max(dp[x-1], dp2[n-x]) > Math.max(dp[x], dp2[n-x-1]))\n                    x++;\n\n                // The final answer happens at this x.\n                dp2[n] = 1 + Math.max(dp[x-1], dp2[n-x]);\n            }\n\n            dp = dp2;\n        }\n\n        return dp[N];\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"super-egg-drop"}
{"id":502992745,"lang":"java","time":"1 month, 2 weeks","timestamp":1622824945,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/502992745/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"47 MB","code":"class Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n\n        // Value of current node or parent node.\n        int parentVal = root.val;\n\n        // Value of p\n        int pVal = p.val;\n\n        // Value of q;\n        int qVal = q.val;\n\n        if (pVal > parentVal && qVal > parentVal) {\n            // If both p and q are greater than parent\n            return lowestCommonAncestor(root.right, p, q);\n        } else if (pVal < parentVal && qVal < parentVal) {\n            // If both p and q are lesser than parent\n            return lowestCommonAncestor(root.left, p, q);\n        } else {\n            // We have found the split point, i.e. the LCA node.\n            return root;\n        }\n    }\n}","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}
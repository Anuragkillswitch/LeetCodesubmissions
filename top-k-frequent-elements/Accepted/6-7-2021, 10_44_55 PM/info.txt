{"id":504506389,"lang":"java","time":"1 month, 2 weeks","timestamp":1623086095,"status_display":"Accepted","runtime":"29 ms","url":"/submissions/detail/504506389/","is_pending":"Not Pending","title":"Top K Frequent Elements","memory":"47.3 MB","code":"class Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n        // O(1) time\n        if (k == nums.length) {\n            return nums;\n        }\n        \n        // 1. build hash map : character and how often it appears\n        // O(N) time\n        Map<Integer, Integer> count = new HashMap();\n        for (int n: nums) {\n          count.put(n, count.getOrDefault(n, 0) + 1);\n        }\n\n        // init heap 'the less frequent element first'\n        Queue<Integer> heap = new PriorityQueue<>(\n            (n1, n2) -> count.get(n1) - count.get(n2));\n\n        // 2. keep k top frequent elements in the heap\n        // O(N log k) < O(N log N) time\n        for (int n: count.keySet()) {\n          heap.add(n);\n          if (heap.size() > k) heap.poll();    \n        }\n\n        // 3. build an output array\n        // O(k log k) time\n        int[] top = new int[k];\n        for(int i = k - 1; i >= 0; --i) {\n            top[i] = heap.poll();\n        }\n        return top;\n    }\n}","compare_result":"111111111111111111111","title_slug":"top-k-frequent-elements"}
{"id":510085232,"lang":"java","time":"1Â month","timestamp":1624099302,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/510085232/","is_pending":"Not Pending","title":"Combination Sum","memory":"39.5 MB","code":"class Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n       \n        List<List<Integer>> l=new ArrayList<>();\n        findCombinations(0,target,candidates,l,new ArrayList<>());\n        return l;\n    }\n    \n    private void findCombinations(int index,int target,int[] candidates,List<List<Integer>> ans,List<Integer> currentDS)\n    {\n        if(index==candidates.length)\n        {\n            if(target==0)\n            {\n                ans.add(new ArrayList<>(currentDS));\n            }\n            return;\n        }\n        if(candidates[index]<=target)\n        {\n            currentDS.add(candidates[index]);\n            findCombinations(index,target-candidates[index],candidates,ans,currentDS);\n            currentDS.remove(currentDS.size()-1);//removing the value while returning\n        }\n        findCombinations(index+1,target,candidates,ans,currentDS);//Not choosing that element\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum"}
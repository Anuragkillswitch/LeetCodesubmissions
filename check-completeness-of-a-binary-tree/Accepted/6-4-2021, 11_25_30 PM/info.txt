{"id":503020712,"lang":"java","time":"1 month, 2 weeks","timestamp":1622829330,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/503020712/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"39.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isCompleteTree(TreeNode root) {\n        boolean seenAnull=false;\n        Queue<TreeNode> queue=new LinkedList<>();\n        queue.offer(root);\n        while(!queue.isEmpty())\n        {\n            TreeNode currentNode=queue.poll();\n            if(currentNode==null)\n                seenAnull=true;\n            else\n            {\n                if(seenAnull)\n                    return false;\n                queue.offer(currentNode.left);\n                queue.offer(currentNode.right);\n            }\n        }\n        \n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree"}
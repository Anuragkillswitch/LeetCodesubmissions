{"id":521660549,"lang":"java","time":"1 week, 5 days","timestamp":1626148193,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/521660549/","is_pending":"Not Pending","title":"Find K-th Smallest Pair Distance","memory":"N/A","code":"class Solution {\n    public int smallestDistancePair(int[] nums, int k) {\n        Arrays.sort(nums);\n        int minDist = nums[1]-nums[0]; // minimum distance between 2 numbers is 0 if they are the same\n        int maxDist = nums[nums.length - 1] - nums[0]; // max distance in sorted array is rightmost-leftmost element\n        \n        // now we have our upper and lower bounds which represent all possible distances between pairs in the input array\n        while(minDist <= maxDist) { // time to implement our binary search\n            \n            int midDist = minDist + (maxDist - minDist)/2;\n            // (minDist + maxDist)/2 also works but can causes integer overflow errors in some languages\n            \n            // since we want the k-th smallest distance pair we now need to count the number of pairs with a distance\n            // greater than midDist so that we can decide how to modify our search space\n            \n            int left = 0;\n            int right = 0;\n            int count = 0;\n            \n            while(right < nums.length) {\n                if(nums[right] - nums[left] > midDist) {\n                    // if this condition is met then the current number and all numbers to its right will be greater\n                    // than midDist fom nums[left] because the array is sorted so we can just increment left\n                    left++;\n                } else {\n                    count += right - left; // adds the number of pairs between right and left\n                    // for example: distance of 0 = 1 pair, distance of 2 = 2 pairs\n                    // distance of 3 = 1 + 2 = 3 pairs\n                    // distance of 4 = 1 + 2 + 3 = 6 pairs and so on\n                    right++;\n                }\n            }\n            \n            if(count >= k) {\n                // we found too many pairs which means the k-th smallest distance pair must have a distance that is\n                // less than our guess so we remove the lower half of our search space\n                maxDist = midDist - 1;\n            } else {\n                // we found too few pairs which means the k-th smallest distance pair must have a distance that is\n                // greater than our guess so we remove the lower half of our search space\n                minDist = midDist + 1;\n            }\n        }\n        return minDist;\n    }\n}","compare_result":"1111101111111111111","title_slug":"find-k-th-smallest-pair-distance"}
{"id":494415000,"lang":"java","time":"2 months, 1 week","timestamp":1621255567,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/494415000/","is_pending":"Not Pending","title":"Verifying an Alien Dictionary","memory":"37.7 MB","code":"class Solution {\n    public boolean isAlienSorted(String[] words, String order) {\n        \n        int [] ary = new int[26];\n    for(int i = 0; i < 26; i++){\n        ary[order.charAt(i) - 'a'] = i;\n    }\n    int j = 0, index = 0, length = words.length;\n    while(j + 1 < length){\n        if(ary[words[j].charAt(index) - 'a'] == ary[words[j + 1].charAt(index) - 'a']){\n            int min = (words[j].length() < words[j + 1].length()) ? \n                words[j].length() : words[j + 1].length();\n            for(index = 0; index < min; index++){\n                if(ary[words[j].charAt(index) - 'a'] > ary[words[j + 1].charAt(index) - 'a']) \n                    return false;\n            }\n        }else if(ary[words[j].charAt(index) - 'a'] > ary[words[j + 1].charAt(index) - 'a']) \n            return false;\n        if(index + 1 <= words[j].length() && \n           words[j].substring(0, index).equals(words[j + 1])) return false;\n        index = 0;\n        j++;\n    }\n    return true;\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"verifying-an-alien-dictionary"}
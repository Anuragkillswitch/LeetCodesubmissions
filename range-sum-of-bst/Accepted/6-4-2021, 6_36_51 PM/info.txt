{"id":502917877,"lang":"java","time":"1 month, 2 weeks","timestamp":1622812011,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/502917877/","is_pending":"Not Pending","title":"Range Sum of BST","memory":"63.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int rangeSumBST(TreeNode root, int low, int high) {\n        if(root==null)return 0;\n        \n        if(root.val>=low && root.val<=high)\n            return root.val+rangeSumBST(root.left,low,high)+rangeSumBST(root.right,low,high);\n        else if(root.val < low)\n            return rangeSumBST(root.right,low,high);\n        else\n            return rangeSumBST(root.left,low,high);\n        \n        \n    }\n}\n\n//If root is less than low then we will search only in the right subtree\n//If root is larger than high then we will search only in the left subtree\n//If root lies within the range then we will add the total sum of both the results of left and right subtrees","compare_result":"11111111111111111111111111111111111111111","title_slug":"range-sum-of-bst"}
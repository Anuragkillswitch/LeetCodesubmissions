{"id":497907413,"lang":"java","time":"2Â months","timestamp":1621918319,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/497907413/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n     List<TreeNode> l;\n        \n    public boolean isValidBST(TreeNode root) {\n       l=new ArrayList<>();\n        \n        inOrder(root);\n        \n        for(int i=1;i<l.size();i++)\n        {\n            if(l.get(i).val<l.get(i-1).val)\n                return false;\n        }\n        return true;\n    }\n    \n    public void inOrder(TreeNode root)\n    {\n        if(root==null)\n             return;\n        \n        inOrder(root.left);\n        l.add(root);\n        inOrder(root.right);\n        \n        return;\n    }\n}","compare_result":"1111001111111111011111111111111111111110111111111111111101111000011111111111001","title_slug":"validate-binary-search-tree"}
{"id":507319139,"lang":"java","time":"1 month, 1 week","timestamp":1623590417,"status_display":"Accepted","runtime":"69 ms","url":"/submissions/detail/507319139/","is_pending":"Not Pending","title":"Palindrome Pairs","memory":"41.2 MB","code":"class Solution {\n\n    \n    public List<List<Integer>> palindromePairs(String[] words) {\n        List<List<Integer>> res = new ArrayList();\n        Map<String, Integer> map = new HashMap();\n\n        for (int i = 0; i < words.length; ++i) {\n            map.put(words[i], i);\n        }\n\n        // Empty String case\n        if (map.containsKey(\"\")) {\n            int blankIdx = map.get(\"\");\n            for (int i = 0; i < words.length; ++i) {\n                if (i != blankIdx && isPalindrome(words[i])) {\n                    res.add(Arrays.asList(blankIdx, i));\n                    res.add(Arrays.asList(i, blankIdx));\n                }\n            }\n        }\n\n        // Reflection case\n        for (int i = 0; i < words.length; ++i) {\n            String reversed = new StringBuilder(words[i]).reverse().toString();\n            Integer reversedIdx = map.get(reversed);\n            if (reversedIdx != null && reversedIdx != i) {\n                res.add(Arrays.asList(i, reversedIdx));\n            }\n        }\n\n\n        // Tricky case\n        for (int i = 0; i < words.length; ++i) {\n            String cur = words[i];\n            for (int cut = 1; cut < cur.length(); ++cut) {\n                String left = cur.substring(0, cut);\n                String right = cur.substring(cut);\n                if (isPalindrome(left)) {\n                    String reversedRight = new StringBuilder(right).reverse().toString();\n                    if (map.containsKey(reversedRight)) {\n                        res.add(Arrays.asList(map.get(reversedRight), i));\n                    }\n                }\n                if (isPalindrome(right)) {\n                    String reversedLeft = new StringBuilder(left).reverse().toString();\n                    if (map.containsKey(reversedLeft)) {\n                        res.add(Arrays.asList(i, map.get(reversedLeft)));\n                    }\n                }\n            }\n        }\n        return res;\n    }\n\n    private boolean isPalindrome(String word) {\n        int i = 0, j = word.length() - 1;\n        while(i < j) {\n            if (word.charAt(i++) != word.charAt(j--)) return false;\n        }\n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-pairs"}
{"id":511127996,"lang":"java","time":"1Â month","timestamp":1624286875,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/511127996/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node II","memory":"38.9 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node next;\n\n    public Node() {}\n    \n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, Node _left, Node _right, Node _next) {\n        val = _val;\n        left = _left;\n        right = _right;\n        next = _next;\n    }\n};\n*/\n\nclass Solution {\n    public Node connect(Node root) {\n        if(root==null)return root;\n        \n        Queue<Node> queue=new LinkedList<>();\n        queue.offer(root);\n        \n        while(!queue.isEmpty())\n        {\n            int size=queue.size();\n            Node dummy=new Node(0);\n            while(size-->0)\n            {\n                Node node=queue.poll();\n                dummy.next=node;\n                dummy=dummy.next;\n                \n                if(node.left!=null)\n                    queue.offer(node.left);\n                if(node.right!=null)\n                    queue.offer(node.right);\n                \n                \n            }\n        }\n        return root;\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node-ii"}
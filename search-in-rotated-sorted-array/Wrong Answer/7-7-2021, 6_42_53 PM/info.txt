{"id":518769703,"lang":"java","time":"2 weeks, 3 days","timestamp":1625663573,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/518769703/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"N/A","code":"class Solution {\n    public int search(int[] nums, int target) {\n        int left=0,right=nums.length-1;\n        \n        while(left<=right)\n        { \n            int mid=left+(right-left)/2;\n            \n            if(nums[mid]==target)\n                return mid;\n            else if(nums[mid]>=nums[left] ) //Left sorted portion e achi\n            {\n                if(target>nums[mid] || target<=nums[left]) //If target is greater than middle or the target is even lesser than the least value assuming that we are in the left sorted array then we will simply search in the right half\n                {\n                    left=mid+1;\n                }else{ //Less than the middle but greater than the middle so we will search in the left portion\n                     right=mid-1;\n                }\n              \n            }\n            else{ //Right sorted portion\n                if(target<nums[mid] || target>nums[right])\n                {\n                    right=mid-1;\n                }else{ //Target>mid target<right Search only in the right portion of the array\n                    left=mid+1;\n                }\n                \n            }   \n                 \n        }\n        \n        \n        return -1;\n    }\n}","compare_result":"011111111111111101111111101111111111110111111011011011111111111011110010111111111111111011111111111101110111111111111110110110111111111101010111111111110111111111111011100101111011111111011111111","title_slug":"search-in-rotated-sorted-array"}
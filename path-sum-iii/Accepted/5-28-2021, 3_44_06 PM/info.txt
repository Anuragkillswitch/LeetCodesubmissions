{"id":499385538,"lang":"java","time":"1 month, 3 weeks","timestamp":1622196846,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/499385538/","is_pending":"Not Pending","title":"Path Sum III","memory":"38.8 MB","code":"class Solution {\n    int count = 0;\n    int k;\n    HashMap<Integer, Integer> h = new HashMap();\n    \n   \n    public int pathSum(TreeNode root, int sum) {\n        k = sum;\n        preorder(root, 0);\n        return count;\n    }\n    \n       public void preorder(TreeNode node, int currSum) {\n        if (node == null)\n            return;\n        currSum += node.val;\n        if (currSum == k)\n            count++;\n        count += h.getOrDefault(currSum - k, 0);\n        h.put(currSum, h.getOrDefault(currSum, 0) + 1);\n        preorder(node.left, currSum);\n        preorder(node.right, currSum);\n\n        // remove the current sum from the hashmap\n        // in order not to use it during \n        // the parallel subtree processing\n        h.put(currSum, h.get(currSum) - 1);\n    }  \n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-sum-iii"}
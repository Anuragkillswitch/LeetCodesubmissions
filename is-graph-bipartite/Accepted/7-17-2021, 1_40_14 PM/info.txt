{"id":523809063,"lang":"java","time":"1Â week","timestamp":1626509414,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/523809063/","is_pending":"Not Pending","title":"Is Graph Bipartite?","memory":"39.2 MB","code":"//0 means not coloured\n//1 represents blue\n//-1 represents red\nclass Solution {\n    public boolean isBipartite(int[][] graph) {\n        int[] colours=new int[graph.length];\n        for(int i=0;i<graph.length;i++)\n        {\n            if(colours[i]==0 && !validColor(graph,colours,1,i))return false;\n        }\n        return true;\n    }\n    \n    private boolean validColor(int[][] graph,int[]  colours,int colour,int node)\n    {\n        if(colours[node]!=0) //If node is already coloured\n        {\n            return colours[node]==colour;//Wwe will check if its the same colour\n        }\n        //if it is not coloured we will colour that node\n        colours[node]=colour;\n        for(int n : graph[node])\n        {\n            if(!validColor(graph,colours,-colour,n))return false;\n        }\n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"is-graph-bipartite"}
{"id":512705176,"lang":"java","time":"1Â month","timestamp":1624564765,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/512705176/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"36.7 MB","code":"class Solution {\n\npublic void solveSudoku(char[][] board) {\n    recur(board);\n}\n\npublic boolean recur(char[][] board){ \n    for(int i=0;i < board.length;i++){\n        for(int k=0;k < board[0].length;k++){\n            if(board[i][k]=='.'){\n                for(char c='1';c <= '9';c++){\n                    if(isSafe(i,k,c,board)){\n                        board[i][k]=c;\n                        \n                        if(recur(board))    return true;\n                        else\n                            board[i][k]='.';\n                    }\n                    }\n                return false;\n                }\n            }\n        }\n    return true;\n    }\n\npublic boolean isSafe(int row,int col,char c,char[][] board){\n    for(int i=0;i < 9;i++){\n        if(board[row][i]==c)    return false;\n        \n        if(board[i][col]==c)    return false;\n        \n        if(board[3*(row/3) + i/3][3*(col/3) + i%3]==c)  return false;\n    }\n    \n    return true;\n}\n}","compare_result":"111111","title_slug":"sudoku-solver"}
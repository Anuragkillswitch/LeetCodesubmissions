{"id":496646067,"lang":"c","time":"2Â months","timestamp":1621689268,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/496646067/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n//Slow pointer and fast pointers\n//If there is exists a cycle then the slow and the fast pointer would collide\nbool hasCycle(struct ListNode *head) {\n    struct ListNode* slowPointer=head;\n    struct ListNode* fastPointer=head;\n    while(fastPointer!=NULL)\n    {\n        if(slowPointer==fastPointer)\n            return true;\n        \n        slowPointer=slowPointer->next;\n        fastPointer=fastPointer->next->next;\n    }\n    \n    return false;\n}","compare_result":"1101100111011101100","title_slug":"linked-list-cycle"}
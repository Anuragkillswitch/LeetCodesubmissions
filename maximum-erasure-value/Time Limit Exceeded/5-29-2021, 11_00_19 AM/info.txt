{"id":499707739,"lang":"java","time":"1 month, 3 weeks","timestamp":1622266219,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/499707739/","is_pending":"Not Pending","title":"Maximum Erasure Value","memory":"N/A","code":"class Solution {\n    \n    //Largest subArray with unique elements\n    \n    public int maximumUniqueSubarray(int[] nums) {\n        int max=Integer.MIN_VALUE;\n        for(int i=0;i<nums.length;i++)\n        {int sum=0;\n            for(int j=i;j<nums.length;j++)\n            {sum+=nums[j];\n                if(isUnique(nums,i,j))\n                    max=Math.max(max,sum);\n            }\n        }\n        return max;\n    }\n    private boolean isUnique(int[] nums,int i,int j)\n    {\n        HashMap<Integer,Integer> map= new HashMap<>();\n        for(int p=i;p<=j;p++)\n        {\n            map.put(nums[p],map.getOrDefault(nums[p],0)+1);\n        }\n        \n        for(int c : map.values())\n        {\n            if(c>1)\n                return false;\n        }\n        \n        return true;\n    }\n}","compare_result":"11111111111111111110000000000000000000000000000000000000000000","title_slug":"maximum-erasure-value"}